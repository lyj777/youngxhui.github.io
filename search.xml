<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[20217蓝桥杯]]></title>
      <url>http://yoursite.com/2017/04/15/20217%E8%93%9D%E6%A1%A5%E6%9D%AF/</url>
      <content type="html"><![CDATA[<p>这是第二年参加蓝桥杯了。一年过去了，还是没有好好的学习算法。今年才意识到算法的重要性，所以立下一个 <strong>flag</strong>—手头这个项目做完就开始系统的学习一下算法。</p>
<p>相比于去年的 蓝桥杯，今年感觉提醒有点变化，不在是一味的暴力。数据量变大了，但是个人感觉没有意义。第一道题完全是个水题，按照出题意思应该是要从文件读取数据吧。可是我用了 Excel 。一分钟秒出答案。就连我这样的菜鸟都能做出来，不说了。</p>
<p>第二题是一个暴力求解的试题。</p>
<blockquote>
<p>题目：<br>用扑克牌 A,2,3,4,5,6,7,8,9组成一个三角形,使每条边的和相同<br>三角形如下<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E8%93%9D%E6%A1%A5%E6%9D%AFjavab2.png" alt=""></p>
<p>A代表1，符合三边之和相等的一共有多少种情况？经过翻转，镜像为同一种的算一种！</p>
</blockquote>
<p>这个题首先要考虑的是镜像和翻转的情况.<br>如图 这个为镜像<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E9%95%9C%E5%83%8F.png" alt=""> </p>
<p>在考虑翻转和镜像问题后,同样的排列就会产生6种情况,我们需要在最后的结果除以6。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tra</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        System.out.println(count / <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> b1 = a[<span class="number">0</span>] + a[<span class="number">1</span>] + a[<span class="number">3</span>] + a[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> b2 = a[<span class="number">0</span>] + a[<span class="number">2</span>] + a[<span class="number">4</span>] + a[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">int</span> b3 = a[<span class="number">5</span>] + a[<span class="number">6</span>] + a[<span class="number">7</span>] + a[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">if</span> (b1 == b2 &amp;&amp; b1 == b3) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            flag[i] = <span class="keyword">true</span>;</span><br><span class="line">            a[index] = i;</span><br><span class="line">            dfs(index + <span class="number">1</span>);</span><br><span class="line">            flag[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案:144</p>
<p>第三题又是一个数据量比较大的题。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/3%E9%87%91%E5%AD%97%E5%A1%94.png" alt=""></p>
<p>这个题是没有做出来的，自己就看看题解研究一下吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计蒜客蓝桥杯模拟赛(5)试题]]></title>
      <url>http://yoursite.com/2017/04/04/%E8%AE%A1%E8%92%9C%E5%AE%A2%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B-5-%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是近期 计蒜客 的一个关于蓝桥杯的算法模拟赛。每个题进行一下简单的计算。</p>
<h1 id="试题"><a href="#试题" class="headerlink" title="试题"></a>试题</h1><h2 id="试题一"><a href="#试题一" class="headerlink" title="试题一"></a>试题一</h2><blockquote>
<p>某君的年龄是个两位数，如果把他年龄的两位数字交换位置后与原数字相加和为 x，与原数字相减差的绝对值为 y。已知 x 比 y 大 32。请你计算 y 的值是多少。</p>
</blockquote>
<p>这个试题很明显是一个送分题。通过手算就可以计算出这个答案。</p>
<p>答案：45</p>
<h2 id="试题二"><a href="#试题二" class="headerlink" title="试题二"></a>试题二</h2><blockquote>
<p>给出方程组：<br>   11x+13y+17z=2471<br>   13x+17y+11z=2739</p>
<p>   已知 x，y，z 均为正整数，请你计算 x，y，z相加和最小为多少</p>
</blockquote>
<p>这个题也是一个送分题,写个简单的暴力就可以算出。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">1000</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">1000</span>; y++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">1000</span>; z++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">11</span> * x + <span class="number">13</span> * y + <span class="number">17</span> * z == <span class="number">2471</span> &amp;&amp; <span class="number">13</span> * x + <span class="number">17</span> * y + <span class="number">11</span> * z == <span class="number">2739</span>) &#123;</span><br><span class="line">                        sum = x + y + z;</span><br><span class="line">                        System.out.println(sum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案：181</p>
<h2 id="试题三"><a href="#试题三" class="headerlink" title="试题三"></a>试题三</h2><blockquote>
<p>将数字 1…9 填入一个3×3 的九宫格中，使得格子中每一横行和的值全部相等，每一竖列和的值全部相等。请你计    算有多少种填数字的方案。</p>
</blockquote>
<p>这个还是一个暴力</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (a[<span class="number">0</span>] = <span class="number">1</span>; a[<span class="number">0</span>] &lt; <span class="number">10</span>; a[<span class="number">0</span>]++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (a[<span class="number">1</span>] = <span class="number">1</span>; a[<span class="number">1</span>] &lt; <span class="number">10</span>; a[<span class="number">1</span>]++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (a[<span class="number">2</span>] = <span class="number">1</span>; a[<span class="number">2</span>] &lt; <span class="number">10</span>; a[<span class="number">2</span>]++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (a[<span class="number">3</span>] = <span class="number">1</span>; a[<span class="number">3</span>] &lt; <span class="number">10</span>; a[<span class="number">3</span>]++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (a[<span class="number">4</span>] = <span class="number">1</span>; a[<span class="number">4</span>] &lt; <span class="number">10</span>; a[<span class="number">4</span>]++) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (a[<span class="number">5</span>] = <span class="number">1</span>; a[<span class="number">5</span>] &lt; <span class="number">10</span>; a[<span class="number">5</span>]++) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (a[<span class="number">6</span>] = <span class="number">1</span>; a[<span class="number">6</span>] &lt; <span class="number">10</span>; a[<span class="number">6</span>]++) &#123;</span><br><span class="line">                                    <span class="keyword">for</span> (a[<span class="number">7</span>] = <span class="number">1</span>; a[<span class="number">7</span>] &lt; <span class="number">10</span>; a[<span class="number">7</span>]++) &#123;</span><br><span class="line">                                        <span class="keyword">for</span> (a[<span class="number">8</span>] = <span class="number">1</span>; a[<span class="number">8</span>] &lt; <span class="number">10</span>; a[<span class="number">8</span>]++) &#123;</span><br><span class="line">                                            <span class="keyword">int</span> row1 = a[<span class="number">0</span>] + a[<span class="number">1</span>] + a[<span class="number">2</span>];</span><br><span class="line">                                            <span class="keyword">int</span> row2 = a[<span class="number">3</span>] + a[<span class="number">4</span>] + a[<span class="number">5</span>];</span><br><span class="line">                                            <span class="keyword">int</span> row3 = a[<span class="number">6</span>] + a[<span class="number">7</span>] + a[<span class="number">8</span>];</span><br><span class="line">                                            <span class="keyword">int</span> col1 = a[<span class="number">0</span>] + a[<span class="number">3</span>] + a[<span class="number">6</span>];</span><br><span class="line">                                            <span class="keyword">int</span> col2 = a[<span class="number">1</span>] + a[<span class="number">4</span>] + a[<span class="number">7</span>];</span><br><span class="line">                                            <span class="keyword">int</span> col3 = a[<span class="number">2</span>] + a[<span class="number">5</span>] + a[<span class="number">8</span>];</span><br><span class="line">                                            <span class="keyword">if</span> (col1 == col2 &amp;&amp; col2 == col3 &amp;&amp; row1 == row2 &amp;&amp; row1 == row3 &amp;&amp; col1 == row1) &#123;</span><br><span class="line">                                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                                                    set.add(a[i]);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                <span class="keyword">if</span> (set.size() == <span class="number">9</span>) &#123;</span><br><span class="line">                                                    count++;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                                set.clear();</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案：72</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python爬取斗鱼图片]]></title>
      <url>http://yoursite.com/2017/04/03/python%E7%88%AC%E5%8F%96%E6%96%97%E9%B1%BC%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>一个简单的 Python 爬虫，用于爬取斗鱼网上的图片。</p>
<ul>
<li>编辑工具：Visual Studio Code</li>
<li>Python 版本：2.7</li>
<li>使用的库：urllib</li>
</ul>
<hr>
<p>Visual Studio Code插件</p>
<ul>
<li>Code Runner</li>
<li>Python</li>
<li>Python for VSCode</li>
<li>MagicPython</li>
</ul>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>首先要打开地址，并且获取该网页的代码。</p>
<p>从代码里获得你要图片。这里我们需要简单的分析一下该网页。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%96%97%E9%B1%BC%E5%9B%BE%E7%89%87.png" alt=""></p>
<p>当我们把鼠标移到地址上的时候就会出现该图片，这个就是我们要爬取的图片。</p>
<p>这个图片是在 <code>data-original</code> 后面，我们就需要进行匹配，通过正则表达式很快就可以达到目的。</p>
<p>网页代码片段</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">"https://rpic.douyucdn.cn/a1704/03/15/1032029_170403155245.jpg"</span> <span class="attr">src</span>=<span class="string">"https://rpic.douyucdn.cn/a1704/03/15/1032029_170403155245.jpg"</span> <span class="attr">width</span>=<span class="string">"283"</span> <span class="attr">height</span>=<span class="string">"163"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>正则表达式 <code>data-original=&quot;(.*?\.(jpg|png))</code></p>
<p>这样我们就获取到了这个页面上所有的 jpg 和 png 图片。</p>
<p>最后通过 urlretrieve 这个方法把图片保存到你想要放的地方。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> <span class="comment"># 通过filename设置路径和名字</span></span><br><span class="line">response=urllib.urlopen(<span class="string">'https://www.douyu.com/directory/game/TVgame'</span>)</span><br><span class="line">html=response.read()</span><br><span class="line"><span class="keyword">print</span> html</span><br><span class="line">imglist=re.findall(<span class="string">r'data-original="(.*?\.(jpg|png))"'</span>,html)</span><br><span class="line"><span class="keyword">print</span> imglist</span><br><span class="line">x=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> imgurl <span class="keyword">in</span> imglist:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'下载图片 %s'</span>%imgurl[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> imgurl[<span class="number">1</span>]==<span class="string">'gif'</span>:</span><br><span class="line">        urllib.urlretrieve(imgurl[<span class="number">0</span>],filename=<span class="string">'G:\PythonCode\pic\%d.gif'</span>%x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        urllib.urlretrieve(imgurl[<span class="number">0</span>],filename=<span class="string">'G:\PythonCode\pic\%d.jpg'</span>%x)</span><br><span class="line">    x+=<span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring学习记录(二)]]></title>
      <url>http://yoursite.com/2017/03/02/Spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="AOP简述"><a href="#AOP简述" class="headerlink" title="AOP简述"></a>AOP简述</h1><p>面向切面编程，扩展功能不修改源代码实现。AOP采用横向抽取机制，取代了传统的纵向继承体系重复代码。</p>
<h1 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h1><p>#AOP操作相关术语</p>
<ul>
<li>链接点：类里面的被增强的方法。</li>
<li>切入点：类里面的增强的方法，在实际操作中，实际增强的方法叫切入点。</li>
<li>通知/增强：增强的逻辑，称为增强，比如扩展日志功能，这个日志功能称为增强。<br> 前置通知：在方法之前执行<br> 后置通知：在方法之后执行<br> 异常通知：出现异之后执行<br> 最终通知：在后置之后执行<br> 环绕通知：在方法之前和之后执行</li>
<li>切面：把增强应用到具体的方法上面，这个过程称为切面。把增强用到切入点的过程。</li>
</ul>
<h1 id="Spring的AOP操作"><a href="#Spring的AOP操作" class="headerlink" title="Spring的AOP操作"></a>Spring的AOP操作</h1><h2 id="Aspectj框架"><a href="#Aspectj框架" class="headerlink" title="Aspectj框架"></a>Aspectj框架</h2><p>在Spring进行aop操作，使用<code>Aspectj</code>框架，这个框架本身不是Spring的一部分，只是一起使用进行AOP操作。</p>
<ul>
<li>版本在2.0以后支持切点表达式支持。</li>
</ul>
<h2 id="基于Aspectj实现AOP操作"><a href="#基于Aspectj实现AOP操作" class="headerlink" title="基于Aspectj实现AOP操作"></a>基于Aspectj实现AOP操作</h2><ul>
<li>相关ja包</li>
</ul>
<blockquote>
<p><code>aopalliance</code>,<code>aspectjweaver</code>,<code>spring-aop</code>,<code>spring-aspects</code></p>
</blockquote>
<ul>
<li>创建Spring核心配置文件导入AOP约束。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/aop</span><br><span class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="基于Aspectj的xml实现"><a href="#基于Aspectj的xml实现" class="headerlink" title="基于Aspectj的xml实现"></a>基于Aspectj的xml实现</h3><ul>
<li><p>常用表达式<br>通过<code>execution</code>函数表达式实现。</p>
<blockquote>
<p>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)</p>
</blockquote>
</li>
<li><p>execution(<em> /增强方法的全路径/): </em>代表任意修饰符，空格后跟随增强方法的全路径。</p>
</li>
<li>execution(<em> com.Hello.</em>):代表该类的所有方法</li>
<li>execution(<em> </em>.*(..))</li>
<li>execution(<em> save</em>(..)) 表示以<code>save</code>开头的方法进行增强。</li>
</ul>
<p>xml配置代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.配置类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"aop.Book"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBook"</span> <span class="attr">class</span>=<span class="string">"aop.MyBook"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.配置aop操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.1配置切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span> <span class="attr">expression</span>=<span class="string">"execution(* aop.Book.add())"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.2配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myBook"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before1"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="基于Aspectj的注解实现"><a href="#基于Aspectj的注解实现" class="headerlink" title="基于Aspectj的注解实现"></a>基于Aspectj的注解实现</h3><p>创建类的对象，在spring的配置文件中开启aop操作。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span> <span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过注解来实现。</p>
<p>在增强类上<br><code>@Aspect</code>注解类，<code>@Before</code>注解方法(前置通知)。</p>
<ul>
<li>@Before</li>
<li>@AfterReturning</li>
<li>@Around</li>
<li>@AfterThrowing</li>
<li>@After</li>
</ul>
<h1 id="Spring的JdbcTemplate操作"><a href="#Spring的JdbcTemplate操作" class="headerlink" title="Spring的JdbcTemplate操作"></a>Spring的JdbcTemplate操作</h1><p><code>Spring</code>在<code>dao</code>层，使用<code>JdbcTemplate</code>，Spring为各种支持的持久化技术，都提供了简单操作的模板和回调。</p>
<table>
<thead>
<tr>
<th>ORM持久化技术</th>
<th>模板类</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDBC</td>
<td>org.springframework.jdbc.core.JdbcTemplate</td>
</tr>
<tr>
<td>Hibemate5.0</td>
<td>org.springframework.orm.hibernate5.HibernateTemplate</td>
</tr>
<tr>
<td>IBatis(MyBatis)</td>
<td>org.springframework.orm.ibatis.sqlMapClientTempate</td>
</tr>
<tr>
<td>JPA</td>
<td>org.springframework.orm.jpa.JpaTempate</td>
</tr>
</tbody>
</table>
<h2 id="JdbcTemplate使用"><a href="#JdbcTemplate使用" class="headerlink" title="JdbcTemplate使用"></a>JdbcTemplate使用</h2><p>都是对数据库进行<code>crud</code>操作。</p>
<ul>
<li>导入JdbcTemplate相关jar包</li>
</ul>
<blockquote>
<p><code>spring-jdbc</code> <code>spring-tx</code></p>
</blockquote>
<ul>
<li>创建对象设置数据库信息，比如：加载驱动，设置url，用户名，密码等。<br>实例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/JdbcDemo"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"12qwaszx"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>创建JdbcTemplate模板对象，设置数据源。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用JdbcTemplate对象里面的方法实现操作。</p>
</li>
</ul>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"INSERT INTO jdbcTest (id, name, password) VALUES (?,?,?)"</span>;</span><br><span class="line">jdbcTemplate.update(sql, <span class="string">"1"</span>, <span class="string">"lucy"</span>, <span class="string">"1234"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"UPDATE jdbcTest\n"</span> +</span><br><span class="line">            <span class="string">"SET name = ?\n"</span> +</span><br><span class="line">            <span class="string">"WHERE id=?"</span>;</span><br><span class="line">jdbcTemplate.update(sql,<span class="string">"cat"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"DELETE FROM jdbcTest WHERE name=?"</span>;</span><br><span class="line">jdbcTemplate.update(sql,<span class="string">"cat"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><code>JdbcTemplate</code>实现查询，有接口<code>RowMapper</code>,<br><code>JdbcTemplate</code>针对这个接口美欧提供实现类，等到不同的类型数据需要自己封装</p>
<ul>
<li><p>查询一个值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//查询返回某值</span><br><span class="line">        String sql1=&quot;SELECT count(*) FROM jdbcTest&quot;;</span><br><span class="line">        int count=template.queryForObject(sql1,Integer.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回对象</span></span><br><span class="line">        String sql2 = <span class="string">"select * from jdbcTest where name=?"</span>;</span><br><span class="line">        <span class="comment">//调用jdbcTemplate方法</span></span><br><span class="line">        User user=template.queryForObject(sql2,<span class="keyword">new</span> MyRowMapper() , <span class="string">"tom"</span>);</span><br><span class="line">        System.out.println(user);</span><br></pre></td></tr></table></figure>
<p>要自己封装这个类<br>其中querForObject这个方法的第二个值为RowMapper，需要自己进行封装。<br>MyRowMapper.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">//        从结果集里面把数据得到</span></span><br><span class="line">        String username = resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">        String password = resultSet.getString(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//        把数据封装到对象里面</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>返回list集合</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql3 = &quot;select * from jdbcTest&quot;;</span><br><span class="line">List&lt;User&gt; list = template.query(sql3, new MyRowMapper());</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>
<h2 id="Spring配置连接池和dao使用JdbcTemplate"><a href="#Spring配置连接池和dao使用JdbcTemplate" class="headerlink" title="Spring配置连接池和dao使用JdbcTemplate"></a>Spring配置连接池和dao使用JdbcTemplate</h2><h3 id="配置c3p0连接池"><a href="#配置c3p0连接池" class="headerlink" title="配置c3p0连接池"></a>配置c3p0连接池</h3><ol>
<li>导入jar包 <code>c3p0</code>和<code>mchange-commons-java</code></li>
<li>在Spring的配置文件配置连接池</li>
<li>在dao中使用</li>
</ol>
<h3 id="dao使用jdbctemplate"><a href="#dao使用jdbctemplate" class="headerlink" title="dao使用jdbctemplate"></a>dao使用jdbctemplate</h3><ol>
<li>在Service中注入Dao。</li>
<li>在Dao中注入jdbc模板。</li>
<li>在模板中注入连接池。</li>
<li>在连接池中写配置。</li>
</ol>
<p>示例代码</p>
<p>UserService.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by youngxhui</span><br><span class="line"> * Time is 17-2-19.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserDao.class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by youngxhui</span><br><span class="line"> * Time is 17-2-19.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql=<span class="string">"INSERT INTO jdbcTest (id, name, password) VALUES (?,?,?)"</span>;</span><br><span class="line">        jdbcTemplate.update(sql, <span class="number">5</span>, <span class="string">"lili"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置c3p0的连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"comboPooledDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/JdbcDemo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"12qwaszx"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.c3p0.UserService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.c3p0.UserDao"</span> <span class="attr">id</span>=<span class="string">"userDao"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"comboPooledDataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务是访问数据库的一个操作序列，数据库应用系统通过事务集来完成对数据库的存取。事务的正确执行使得数据库从一种状态转换成另一种状态。</p>
<h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ul>
<li>原子性（atomicity）</li>
<li>一致性（consistency</li>
<li>隔离性 （isolation）</li>
<li>持久性（durability）</li>
</ul>
<h2 id="Sping事务管理api"><a href="#Sping事务管理api" class="headerlink" title="Sping事务管理api"></a>Sping事务管理api</h2><p>spring对事务管理的两种方式</p>
<ul>
<li>编程式事务管理(不用)</li>
<li>声明式事务管理<ul>
<li>基于xml配置文件实现</li>
<li>基于注解实现</li>
</ul>
</li>
</ul>
<h3 id="api介绍"><a href="#api介绍" class="headerlink" title="api介绍"></a>api介绍</h3><p>Spring事务管理高层抽象主要包含3个接口</p>
<ul>
<li>PlatformTransactionManager事务管理器</li>
<li>TransactionDefinition事务定义信息</li>
<li>TransactionStatus事务具体运行状态</li>
</ul>
<p>PlatformTransactionManager针对不同的dao层，提供了不同的接口实现类</p>
<table>
<thead>
<tr>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework.idbc.datasource.DataSourceTransactionManager</td>
<td>使用Spring JDBC或iBatis进行持久化数据时使用</td>
</tr>
<tr>
<td>org.springframework.orm.hibernate5.HibernateTransactionManger</td>
<td>使用Hibernate5.0版本进行持久化数据时使用</td>
</tr>
<tr>
<td>org.springframework.orm.jpa.JpaTransactionManager</td>
<td>使用JPA进行持久化</td>
</tr>
<tr>
<td>org.springframework.jdo.JdoTransactionManager</td>
<td>当持久化机制是Jdo时使用</td>
</tr>
<tr>
<td>org.springframework.transaction.ita.JtaTransactionManager</td>
<td>使用一个JTA实现来管理事务，在一个事务跨越多个资源时必须使用</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Log4j使用]]></title>
      <url>http://yoursite.com/2017/02/19/Log4j%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>通过log4j可以看到程序运行时候更加详细的信息。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol>
<li>导入log4j的jar包</li>
<li>复制log4j的配置文件</li>
</ol>
<p>一个简单的log4j的配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### 设置日志等级 ###</span><br><span class="line">log4j.rootLogger=info, stdout</span><br><span class="line">### 输出到控制台 ###</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.err</span><br><span class="line">#log4j.appender.stdout=System.err</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line">### 输出到日至文件</span><br><span class="line">log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.file.File=/home/youngxhui/IdeaProjects/SpringDemo/spring-aop-xml/src/mylog.log</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=%&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br></pre></td></tr></table></figure>
<h1 id="设置日志级别"><a href="#设置日志级别" class="headerlink" title="设置日志级别"></a>设置日志级别</h1><ul>
<li>info：基本信息</li>
<li>debug：更详细的信息</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/log4j.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring学习(一)]]></title>
      <url>http://yoursite.com/2017/02/08/Spring%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>Spring学习笔记，仅供自己参考。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol>
<li>Spring是开源的轻量级框架。</li>
<li>Spring核心主要为两部分：<br>(1).AOP:面向切面编程<br>(2).IOC：控制反转：<br> 把对象的创建不是通过new的方式实现，而是交给spring配置创建类对象</li>
<li>Spring是一站式框架。<br>Spring在JavaEE三层结构中，每一层都提供不同的解决技术。<ul>
<li>web层：SpringMVC</li>
<li>service层：Spring的ioc</li>
<li>dao层：Spring的jdbcTemplate</li>
</ul>
</li>
<li>Spring版本：4.x</li>
</ol>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul>
<li>用于沟通的中介勿的抽象化。</li>
<li>对外声明。</li>
<li>Java 8中接口可以拥有方法体。</li>
</ul>
<h1 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h1><ul>
<li>结构设计中，分清层次及调用关系，每层只能向外提供一组功能接口，更层次仅依赖接口而非实现类。</li>
<li>接口实现的变动不影响各层的调用。</li>
<li>隐藏具体实现和实现多态性的组件。</li>
</ul>
<h1 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h1><h2 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h2><p>控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护。<br>把对象的创建交给spring进行管理</p>
<h2 id="IOC操作的两种操作"><a href="#IOC操作的两种操作" class="headerlink" title="IOC操作的两种操作"></a>IOC操作的两种操作</h2><ul>
<li>IOC的基于配置文件方式</li>
<li>IOC的注解方式</li>
</ul>
<h2 id="IOC的底层原理"><a href="#IOC的底层原理" class="headerlink" title="IOC的底层原理"></a>IOC的底层原理</h2><ol>
<li>xml的配置文件</li>
<li>dom4j解决xml</li>
<li>工厂设计模式</li>
<li>反射</li>
</ol>
<h2 id="IOC案例"><a href="#IOC案例" class="headerlink" title="IOC案例"></a>IOC案例</h2><ol>
<li>导入jar包</li>
</ol>
<ul>
<li>核心jar包<br><code>Beans</code> <code>Core</code> <code>Context</code>, <code>SpEL</code></li>
<li>支持日志输出的jar包</li>
</ul>
<ol>
<li>创建类，在类里面创建方法</li>
<li>创建spring的配置文件，配置创建类</li>
</ol>
<ul>
<li>建议放到src下面 </li>
</ul>
<ol>
<li>测试对象创建</li>
</ol>
<h2 id="Spring的Bean管理-xml"><a href="#Spring的Bean管理-xml" class="headerlink" title="Spring的Bean管理(xml)"></a>Spring的Bean管理(xml)</h2><h3 id="实例化三种方式"><a href="#实例化三种方式" class="headerlink" title="实例化三种方式"></a>实例化三种方式</h3><ul>
<li>使用类的无参构造(主要使用方式)</li>
<li>静态工厂创建</li>
<li>实例工厂创建</li>
</ul>
<h3 id="Bean标签常用属性"><a href="#Bean标签常用属性" class="headerlink" title="Bean标签常用属性"></a>Bean标签常用属性</h3><ul>
<li>id属性<br> 起名称，id的属性值可以是任意命名，但是不能包含特殊符号</li>
<li>class属性<br> 创建对象所在类的全路径  </li>
<li>name属性<br> 功能和id属性是一样的，但是name属性可以包含特殊符号。  </li>
<li>scope属性<br> <code>singleton</code>:默认值，单例对象。<br> <code>prototupe</code>:多例。<br> <code>request</code>:创建了对象，把对象放到request域里面。<br> <code>session</code>:创建对象，把对象放到session里面。<br> <code>globalSession</code>:创建对象，把对象放到globalSession里面。</li>
</ul>
<h2 id="Spring的Bean的管理-注解"><a href="#Spring的Bean的管理-注解" class="headerlink" title="Spring的Bean的管理(注解)"></a>Spring的Bean的管理(注解)</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul>
<li>代码里面的特殊标记，使用注解可以完成功能。</li>
<li>注解写法<code>@注解名称(属性名称=属性值)</code>。</li>
<li>注解使用在类上面，方法上面和属性上面。</li>
</ul>
<p>在<code>xml</code>需要配置一下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.young.anno"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Bean管理常用注解"><a href="#Bean管理常用注解" class="headerlink" title="Bean管理常用注解"></a>Bean管理常用注解</h3><ul>
<li>Component<br>– 在Spring中提供的<code>@Component</code>三个衍生注解<ul>
<li>@Controller WEB层</li>
<li>@Service    业务层</li>
<li>@Repository 持久层<br>这四个注解目前的功能是一样的，都是创建对象。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Scope<br>用于单例与多例等配置,写在<code>Component</code>的下面。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Autowired<br>注入属性</p>
</li>
<li><p>Resource<br>name属性写创建dao对象的value值</p>
</li>
</ul>
<h1 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI 依赖注入"></a>DI 依赖注入</h1><p>创建对象并且组装对象之间的关系</p>
<h2 id="有参构造注入"><a href="#有参构造注入" class="headerlink" title="有参构造注入"></a>有参构造注入</h2><p>采用<code>constructor-arg</code>来进行,<code>name</code>和<code>value</code>进行对构造器的值进行注入。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"preperty"</span> <span class="attr">class</span>=<span class="string">"com.young.property.PrepertyDemo1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h2><p>使用<code>property</code>标签进行注入，<code>name</code>定义类里面定义的属性的名称，<code>value</code>设置具体的值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.young.property.Book"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookname"</span> <span class="attr">value</span>=<span class="string">"one"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>spring框架只支持set方法注入和构造器注入 </li>
</ul>
<h2 id="注入对象类型属性"><a href="#注入对象类型属性" class="headerlink" title="注入对象类型属性"></a>注入对象类型属性</h2><ul>
<li>创建service类dao类</li>
<li>在service把dao作为类型属性</li>
<li>生成dao类型的set方法</li>
</ul>
<h3 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h3><ul>
<li>UserService.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service"</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"service"</span> <span class="attr">class</span>=<span class="string">"com.young.ioc.UserService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能写value属性，要写ref,dao配置bean标签的id值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userdao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userdao"</span> <span class="attr">class</span>=<span class="string">"com.young.ioc.UserDao"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注解注入方式"><a href="#注解注入方式" class="headerlink" title="注解注入方式"></a>注解注入方式</h3><ol>
<li>Autowired</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value = <span class="string">"userservice"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service"</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>Resure</li>
</ol>
<p>UserDao.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userdao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserDao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h2><ul>
<li><p>数组</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"args"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小马<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小宋<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小王<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小李子<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>list类型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>map类型</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>properties</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"name"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="xml和注解比较"><a href="#xml和注解比较" class="headerlink" title="xml和注解比较"></a>xml和注解比较</h2><table>
<thead>
<tr>
<th>比较项</th>
<th>xml</th>
<th>注解</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加</td>
<td><code>&lt;Bean id=&quot;&quot; class=&quot;&quot;/&gt;</code></td>
<td>@Component</td>
</tr>
<tr>
<td>多例/单例</td>
<td><code>&lt;Bean scope=&quot;prototype/&gt;&quot;</code></td>
<td>@Scope</td>
</tr>
<tr>
<td>对象类型注入</td>
<td><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;  &lt;property name=&quot;&quot;ref=&quot;&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></td>
<td>@Resource</td>
</tr>
</tbody>
</table>
<h2 id="配置文件与注解混合使用"><a href="#配置文件与注解混合使用" class="headerlink" title="配置文件与注解混合使用"></a>配置文件与注解混合使用</h2><p>案例：</p>
<p>BookDao.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bookDao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OrderDao.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bookDao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BookService.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"bookDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"ordlerDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> OrderDao ordersDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service"</span>);</span><br><span class="line">        bookDao.book();</span><br><span class="line">        ordersDao.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.young.xmlanno"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookservice"</span> <span class="attr">class</span>=<span class="string">"com.young.xmlanno.BookService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"com.young.xmlanno.BookDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ordlerDao"</span> <span class="attr">class</span>=<span class="string">"com.young.xmlanno.OrderDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testxmlAnno</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bea2.xml"</span>);</span><br><span class="line">        BookService bookService= (BookService) context.getBean(<span class="string">"bookservice"</span>);</span><br><span class="line">        bookService.service();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Junit单元测试]]></title>
      <url>http://yoursite.com/2017/01/19/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="什么是Junit"><a href="#什么是Junit" class="headerlink" title="什么是Junit"></a>什么是Junit</h1><p>什么是Junit，Junit是用于java代码单元测试的框架。</p>
<h1 id="为什么要用Junit"><a href="#为什么要用Junit" class="headerlink" title="为什么要用Junit"></a>为什么要用Junit</h1><p>简单的说，我们在写java代码的时候每次写完一个类，都要写一个<code>public static void main(String args[])</code>的方法来进行方法的调用，写完之后再删除，如果类比较多那么我们所创建的方法也比较多，操作起来比较麻烦。而Junit就是为了解决这种情况，他可以在一个类里面创建多个可运行的方法，来进行测试，这便是我们所使用Junit的原因。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>我们在我们的项目中使用Junit需要先下载<code>junit.jar</code>包和<code>hamcrest-core.jar</code>并添加<a href="https://github.com/junit-team/junit4/wiki/Download-and-Install" target="_blank" rel="external">Github地址</a>。<br>这样我们就可以进行使用了。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>我们创建了一个<code>HelloWorld</code>的类，类里面有<code>sayHello</code>这个方法，我们要对这个方法进行测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们写一个类进行测试。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">        helloWorld.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以这样对<code>sayHello</code>方法就行测试。</p>
<p>但是，我们创建这个方法要满足一下要求。</p>
<ol>
<li>方法必须是公用且无返回值(<code>public void</code>)</li>
<li>方法必须可以抛出异常<code>throws Exception</code></li>
<li>方法必须用<code>@test</code>注解</li>
</ol>
<p>这样我们就创建好了一个测试方法，并且我们可以在该类下写无数个这个的方法用于不同的测试。</p>
<h1 id="IDEA演示"><a href="#IDEA演示" class="headerlink" title="IDEA演示"></a>IDEA演示</h1><ul>
<li>版本IDEA U 2016.3.1</li>
</ul>
<p>首先我们先写好我们的<code>HelloWorld</code>类<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/helloworld.png" alt=""><br>针对我们的sayHello方法进行测试，快捷键<code>ctrl+shift+t</code><br><img src="http://7xt81u.com1.z0.glb.clouddn.com/GIF.gif" alt=""><br>这样我们就可以测试我们的方法了。</p>
<p>一般为了方便，我们会新建一个test文件夹。标记为test目录，这样自动生成的test类就会放到test目录中，不影响我们正常编写的代码。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%A0%87%E8%AE%B0%E7%9B%AE%E5%BD%95.png" alt=""></p>
<p>结果如下<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%94%9F%E6%88%90test.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maven入门]]></title>
      <url>http://yoursite.com/2017/01/10/Maven%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h1><p><code>Maven</code>是一个<strong>跨平台</strong>的项目管理工具，主要用于基于<code>Java</code>平台的项目构建，依赖管理。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="maven的生命周期和功能"></p>
<p>maven之前的项目管理一般为 <code>ant</code>。</p>
<h1 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h1><p><code>Maven</code>的出现时为了解决项目的一些问题：</p>
<ol>
<li>如果有好几个项目，这好几个项目中，需要用到很多相同的jar包，<br>能不能只建立一个仓库来解决这个问题？</li>
<li>测试方法能不能全部运行呢？</li>
<li>怎么样把一个模块的功能放入到仓库中</li>
</ol>
<h1 id="Maven的安装和配置"><a href="#Maven的安装和配置" class="headerlink" title="Maven的安装和配置"></a>Maven的安装和配置</h1><h2 id="Maven的安装"><a href="#Maven的安装" class="headerlink" title="Maven的安装"></a>Maven的安装</h2><h3 id="Jdk要求"><a href="#Jdk要求" class="headerlink" title="Jdk要求"></a>Jdk要求</h3><p>jdk要求1.7+</p>
<h3 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h3><p>从<a href="http://maven.apache.org/" target="_blank" rel="external">Maven官网</a>上下载最新版本的<code>Maven</code></p>
<h3 id="设定环境变量"><a href="#设定环境变量" class="headerlink" title="设定环境变量"></a>设定环境变量</h3><p>将下载好的<code>Maven</code>的<code>bin</code>追加到环境变量<code>path</code>中。</p>
<h3 id="检查Maven是否配置成功"><a href="#检查Maven是否配置成功" class="headerlink" title="检查Maven是否配置成功"></a>检查Maven是否配置成功</h3><p>在cmd中运行<code>mvn -v</code>，当出现下面的提示证明配置正确</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/mvn-v.png" alt=""></p>
<p><strong>注意：要用管理员权限运行cmd，否则会报错</strong></p>
<h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><p><code>Maven</code>的很大作用就是导入<code>jar</code>包,所以我们建立一个仓库来放置项目所用的jar包，在需要的时候进行管理。</p>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>Maven的仓库默认路径是<code>C:\Users\UserName\.m2</code> ,<strong>注：UserName为个人电脑名称</strong></p>
<h1 id="Maven的约定"><a href="#Maven的约定" class="headerlink" title="Maven的约定"></a>Maven的约定</h1><table>
<thead>
<tr>
<th>路径</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>src/main/java</td>
<td>存放项目的java文件</td>
</tr>
<tr>
<td>src/main/resources</td>
<td>存放项目的资源文件，如spring，hibernate的配置文件</td>
</tr>
<tr>
<td>    src/test/java</td>
<td>存放所有的测试的java文件</td>
</tr>
<tr>
<td>src/test/resources</td>
<td>存放测试用的资源文件</td>
</tr>
<tr>
<td>target</td>
<td>项目输出位置</td>
</tr>
<tr>
<td>pom.xml</td>
<td>文件</td>
</tr>
</tbody>
</table>
<p>必须按照这个约定放置</p>
<h1 id="Maven项目"><a href="#Maven项目" class="headerlink" title="Maven项目"></a>Maven项目</h1><p>知道了Maven的约定，那么我们就可以根据约定来进行创建第一个项目。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%9B%AE%E5%BD%95.png" alt=""><br>在<code>HelloWorld.java</code>文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.maven.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"HelloWorld"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HelloWorldTest.java</code>文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.young.maven.model;</span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Assert.assertEquals(<span class="string">"HelloWorld"</span>,<span class="keyword">new</span> HelloWorld().sayHello());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pom.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.young.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在根目录下执行命令<code>mvn compile</code><br><img src="http://7xt81u.com1.z0.glb.clouddn.com/comile.png" alt=""><br>这样就会编译成功。</p>
<h1 id="Maven构建命令"><a href="#Maven构建命令" class="headerlink" title="Maven构建命令"></a>Maven构建命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>mvn -v</td>
<td>查看maven版本</td>
</tr>
<tr>
<td>compile</td>
<td>编译</td>
</tr>
<tr>
<td>test</td>
<td>测试</td>
</tr>
<tr>
<td>package</td>
<td>打包</td>
</tr>
<tr>
<td>clean</td>
<td>删除target</td>
</tr>
<tr>
<td>install</td>
<td>安装jar到本地仓库</td>
</tr>
</tbody>
</table>
<h1 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Mevan中这三个就是基础坐标也是唯一的表示，可以快速定位到任何一个包</p>
<h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><ul>
<li>本地仓库</li>
<li>远程仓库</li>
<li>镜像仓库</li>
<li>如果<code>Maven</code>在本地仓库找不到构建，那么就会去<code>Maven</code>的中央仓库去寻找，如果<code>Maven</code>的中央仓库没有，就会报错。因为Maven的远程仓库在国外,常常无法访问或者很慢,这是我们就要使用一些镜像仓库,来帮助我们。<br>在”~\apache-maven-3.3.9\conf\settings.xml”文件中，找到<code>mirrors</code>,我们可以修改这里进行镜像设置。</li>
</ul>
<p><a href="http://mvnrepository.com/" target="_blank" rel="external">Maven中央仓库</a></p>
<blockquote>
<p>中央仓库地址: <a href="http://repo.maven.apache.org/" target="_blank" rel="external">http://repo.maven.apache.org/</a></p>
</blockquote>
<h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><ul>
<li><code>project</code>是包含了pom的约束信息</li>
<li><code>modelVersion</code>指定了当前pom的版本</li>
<li><code>groupId</code>当前maven输入那个项目，包名+项目名</li>
<li><code>artifactId</code>项目名+模块名<br><code>version</code>版本号，第一个0表示大版本号，第二个0表示分支版本号，第三个0表示小版本号。<code>snapshot</code>快照，<code>alpha</code>内部测试版本，<code>beta</code>公测版本，<code>Relese</code>稳定版本，<code>GA</code>正式发布版本。</li>
<li><code>packaging</code>打包方式，默认为jar包，可以为war，zip</li>
<li><code>name</code> 项目描述</li>
<li><code>url</code>项目地址，项目描述</li>
<li><code>developers</code> 开发人员信息</li>
<li><code>licenses</code> 许可信息</li>
<li><code>organization</code>组织信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>依赖范围<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置依赖是否可选--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除依赖传递列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>#Maven依赖</p>
<h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p> <code>scope</code> 控制依赖和三种classpath的关系。</p>
<blockquote>
<p> 三种classpath</p>
<ol>
<li>编译</li>
<li>测试</li>
<li>运行</li>
</ol>
</blockquote>
<p><code>scope</code>一共有6个值分别为<code>compile</code>,<code>provided</code>,<code>runtime</code>,<code>test</code>,<code>system</code>,<code>import</code>。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>compile</code></td>
<td>默认的范围，编译测试运行都要效。</td>
</tr>
<tr>
<td><code>provided</code></td>
<td>在编译和测试有效，运行时无效。</td>
</tr>
<tr>
<td><code>runtime</code></td>
<td>在测试和运行时有效</td>
</tr>
<tr>
<td><code>test</code></td>
<td>仅仅在测试有效</td>
</tr>
<tr>
<td><code>system</code></td>
<td>在本系统有效，移植性非常差</td>
</tr>
<tr>
<td><code>improt</code></td>
<td>导入范围，它只是用在dependencyManagement中，表示从其他pom.xml继承的依赖。</td>
</tr>
</tbody>
</table>
<h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>例如<code>MavenB</code>项目依赖<code>MavenA</code>,而<code>MavenC</code>依赖于<code>MavenB</code>，这样的活那么<code>MavenC</code>就会依赖于<code>MavenA</code>。</p>
<h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>A和B依赖不同版本但是相同的构建，就会出现冲突。</p>
<p>处理原则：</p>
<ul>
<li>断路优先<br>A-&gt;B -&gt; C -&gt;X(jar)<br>A-&gt;D-&gt;X(jar)<br>会优先解析路径短的。</li>
<li>先声明先优先<br>如果两条路径一样，那么先声明的会先依赖。</li>
</ul>
<h1 id="Maven创建JavaWeb"><a href="#Maven创建JavaWeb" class="headerlink" title="Maven创建JavaWeb"></a>Maven创建JavaWeb</h1><ul>
<li>Maven</li>
<li>IDEA</li>
</ul>
<p>创建Maven项目,选择webapp<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/ideawebapp.png" alt=""><br>填写好 <code>GroupId</code>和<code>ArtifacetId</code>之后next。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/id%E5%A1%AB%E5%86%99.png" alt=""><br>这样我们就完成了一次创建。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%AE%8C%E6%88%90.png" alt=""><br>因为只为我们创建了resource目录，按照Maven的约定，我们需要创建其他目录。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结]]></title>
      <url>http://yoursite.com/2016/12/30/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>忙完了考试，课程设计，大创答辩，终于可以静下心来写一写今年的年终总结。</p>
<h1 id="0x01-概况"><a href="#0x01-概况" class="headerlink" title="0x01 概况"></a>0x01 概况</h1><hr>
<p>只能感叹时光飞逝，一年又一年啊，记得去年写这个总结的时候还是在宿舍，午后阳光。那时刚好，今年写总结的地点已经变为了实验室。来说说这一年是怎么过来的吧。</p>
<h1 id="0x02-蓝桥杯"><a href="#0x02-蓝桥杯" class="headerlink" title="0x02 蓝桥杯"></a>0x02 蓝桥杯</h1><hr>
<p>去年元旦刚过，大一的我还不太懂事，那时的我应该是在准备蓝桥杯吧。比较紧张，也想着在这次比赛中获得一个好的成绩，虽说距离<strong>蓝桥杯</strong>还有一段时间，毕竟大一，想着准备充足一些，有种初生牛犊不怕虎的感觉。在准备蓝桥杯的同时也在准备考试。<strong>蓝桥杯</strong>的最后是没有任何名次……仅仅限于我，我不清楚最后改题是在我离开考场后改题，还是就没有通知，总之我是没有拿到任何名次，当时的感受都记录在这个博客里。<a href="http://youngxhui.github.io/2016/04/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%84%9F%E5%8F%97/" target="_blank" rel="external">第一次参加蓝桥杯的感受</a></p>
<h1 id="0x03-实验室"><a href="#0x03-实验室" class="headerlink" title="0x03 实验室"></a>0x03 实验室</h1><hr>
<p>实验室的加入对于我个人来说还是有所提升的，在大一学完<code>c语言</code>后，能每周写代码的人我觉得不超过20%，甚至比这个还少。很多人学完<code>c语言</code>后电脑就成了电视机，游戏机。也许我如果没有加入实验室可能会成为他们的一名。<br>加入实验室的过程我还记得，比较痛苦的经历，熬了两天，把慕课网上的<a href="http://www.imooc.com/learn/85" target="_blank" rel="external">Java入门</a>看完，勉勉强强的加入了实验室。大一上学期的我感觉是对程序刚刚有个了解而已，连入门都不敢说。加入实验室后，自己搭建了<code>github</code>+<code>hexo</code>博客，顺便了学会了<code>git</code>，<code>github</code>。认识<code>github</code>之后，真的如网上大神所说，打开了一个新世界的大门。实验室其实给我更多的是一种激励。说实话，在实验室仍然靠自学，自学能力提高了一个很高的程度，不仅仅在编程方面。我的小伙伴常常和我说：我感觉上了大学很多人的脑子都不动了，感觉他们退化了，变笨了。当然实验室的收获不仅仅是这点点。</p>
<h1 id="0x04-Git-Github"><a href="#0x04-Git-Github" class="headerlink" title="0x04 Git/Github"></a>0x04 Git/Github</h1><hr>
<p>可以毫不虚心的说，在我们这个这一届的实验室我是第一个了解并且使用<code>GitHub</code>的人，所以我写了一个关于<a href="http://youngxhui.github.io/tags/GitHub/" target="_blank" rel="external"><code>Github入门系列</code></a>的教程。不仅仅是为了实验室的同学，也是为了我与和我一样想学习<code>Github</code>难找到教程的人。也收获了每个月我的博客访问量达到了3000+。赠人玫瑰，手有余香。</p>
<h1 id="0x05-Android"><a href="#0x05-Android" class="headerlink" title="0x05 Android"></a>0x05 Android</h1><hr>
<p>暑假前曾经一度想参加<strong>华北五省计算机应用大赛</strong>。于是开始了一个暑假的<code>Android</code>学习,学习过程并没有我想的那么一帆风顺，尤其是在新的控件学习中，在一个月的学习之后开始于小伙本尝试的做我们的应用，才发现我们仍旧什么都不会，直到现在，还是一种越学越多的感觉，总感觉还有很多新的知识要学习。</p>
<h1 id="0x06-项目组"><a href="#0x06-项目组" class="headerlink" title="0x06 项目组"></a>0x06 项目组</h1><hr>
<p>加入实验室之后，我发现越来越多的比赛想去尝试，想去报名，很多比赛需要一个团队去一起努力，组建一个团队是我大二一开始就出现的想法，也和好几个人讨论过，每次总是讨论到最后没有什么结论。知道上个月底，我开始了最后的突击。因为马上2016就要过去了，再不确立这一年过去，2017也会和这一样，一直拖。还好，最后项目组成立了。四个人可以负责两个前段，两个后端。项目组的组建应该说是刚刚赶上，为时不晚。</p>
<h1 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h1><hr>
<p>2016年马上就要离去，总结2016的收获其实不少，缺失也是有的，唯有2017努力了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList源码分析]]></title>
      <url>http://yoursite.com/2016/11/27/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p><code>ArrayList</code> 是我们常用的一种数据结构。仔细分析 <code>ArrayList</code> 这个类和类所包含的方法。</p>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><p>ArrayList继承了AbstractList 和使用了List RandomAccess Cloneable和Serializable四个接口。</p>
<p><code>AbstractList</code>该接口的作用是用于 <code>AbstractList</code> 提供了 <code>List</code> 接口的默认实现，在<code>AbstractList</code>中已经使用了<code>List</code>接口，为什么还会在<code>ArrayList</code>中使用的<code>List</code>接口，目测是为了让大家更加明白清楚的知道这个类是List这个集合。<br><code>RandomAccess</code> 是</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><code>ArrayList</code>只有两个私有变量，分别是<code>size</code>和<code>elementData</code>。<br><code>elementData</code>这个是来记录传入<code>ArrayList</code>的元素。而<code>size</code>是用来记录传入的元素的个数。</p>
<h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>该类里面一共有三个构造器</p>
<ul>
<li>ArrayList()</li>
<li>ArrayList(int)</li>
<li>ArrayList(Collection)</li>
</ul>
<p>下面就详细的分析一下三个构造器的使用。</p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList()"></a>ArrayList()</h2><p>ArrayList无参的构造器,使用这个无参构造器会默认有一个长度为10的数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ArrayList-int"><a href="#ArrayList-int" class="headerlink" title="ArrayList(int)"></a>ArrayList(int)</h2><p>传入一个int值，这个值为<code>ArrayList</code>的初始容量。如果等于0则会默认使用<code>EMPTY_ELEMENTDATA</code>生成一个空的集合。如果输入为非负数的话会抛出一个<code>IllegalArgumentException</code>(非法参数)异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ArrayList-Collection"><a href="#ArrayList-Collection" class="headerlink" title="ArrayList(Collection)"></a>ArrayList(Collection)</h2><p>这个构造函数是传入一个集合,<code>toArray</code>是将这个集合转化为一个实际的数组，下面的程序就是和传入<code>int</code>类型是差不多的，判断数组长度是否为0，如果等于0则会默认使用<code>EMPTY_ELEMENTDATA</code>生成一个空数组。在不为空的时候，将<code>Collection</code>的值copy到<code>ArrayList</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// replace with empty array.</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="trimToSize"><a href="#trimToSize" class="headerlink" title="trimToSize()"></a>trimToSize()</h2><p>该方法主要是用于将<code>ArrayList</code>实际容量调整为列表当前大小。这里它实用了一个三目运算<strong><code>?  :</code></strong>。</p>
<ul>
<li><code>modCount</code>这个变量在<code>AbstractList</code>这个类里面,其中定义<code>int</code>这个变量使用了<code>transient</code>。</li>
</ul>
<blockquote>
<p>protected transient int modCount = 0;</p>
</blockquote>
<p><code>transient</code> 当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中。</p>
<ul>
<li>三目运算和<code>if else</code>的区别，三目运算是会有一个返回值的，<code>if else</code>没有返回值。如果非要写成<code>if else</code>应该也可以。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">           elementData = (size == <span class="number">0</span>)</span><br><span class="line">             ? EMPTY_ELEMENTDATA</span><br><span class="line">             : Arrays.copyOf(elementData, size);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity()"></a>ensureCapacity()</h2><p>如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数。<br> DEFAULT_CAPACITY=10是一个常量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void ensureCapacity(int minCapacity) &#123;</span><br><span class="line">        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            // any size if not default element table</span><br><span class="line">            ? 0</span><br><span class="line">            // larger than default for default empty table. It&apos;s already</span><br><span class="line">            // supposed to be at default size.</span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        if (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><p>返回此列表中首次出现的指定元素的索引，或如果此列表不包含元素，则返回 -1。更确切地讲，返回满足 (o==null ? get(i)==null : o.equals(get(i))) 的最低索引 i ，如果不存在此类索引，则返回 -1。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h2><p>如果此列表中包含指定的元素，则返回 true。更确切地讲，当且仅当此列表包含至少一个满足 (o==null ? e==null : o.equals(e)) 的元素 e 时，则返回 true。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p><code>lastIndexOf</code>用于返回此列表中最后一次出现的指定元素的索引，或如果此列表不包含索引，则返回 -1。<br>这里<code>if</code>和<code>else</code>里面采用了两种不同的比较方法。<code>if</code>代码块里面是采用了<code>==</code>说明比较的是对象，而<code>else</code>的代码块采用的是<code>equals</code>比较。为什么这里采用两种比较方法呢？</p>
<p><strong>这里产生一个疑问？</strong></p>
<blockquote>
<p><code>null</code>是对象还是值？</p>
</blockquote>
<p><a href="https://segmentfault.com/q/1010000007268433" target="_blank" rel="external">正在技术论坛上提问</a></p>
<hr>
<p><a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.9" target="_blank" rel="external">Keywords</a></p>
<blockquote>
<p>50 character sequences, formed from ASCII letters, are reserved for use as keywords and cannot be used as identifiers (§3.8).<br>Keyword: one of</p>
</blockquote>
<pre><code>abstract  continue   for          new         switch
assert     default    if           package     synchronized
boolean    do         goto         private     this
break      double     implements   protected   throw
byte       else       import       public      throws
case       enum       instanceof   return      transient
catch      extends    int          short       try
char       final      interface    static      void
class      finally    long         strictfp    volatile
const      float      native       super       while
</code></pre><blockquote>
<p>The keywords const and goto are reserved, even though they are not currently used. This may allow a Java compiler to produce better error messages if these C++ keywords incorrectly appear in programs.<br>While true and false might appear to be keywords, they are technically Boolean literals (§3.10.3). Similarly, while null might appear to be a keyword, it is technically the null literal (§3.10.7).</p>
</blockquote>
<hr>
<p>在这个50个关键字中没有<code>null</code>，但是下面的一行字写了。</p>
<blockquote>
<p>While true and false might appear to be keywords, they are technically Boolean literals (§3.10.3). Similarly, while null might appear to be a keyword, it is technically the null literal (§3.10.7).</p>
</blockquote>
<p>虽然<code>true</code>和<code>false</code><strong>可能看起来</strong>是关键字，但它们在技术上是<strong>布尔值</strong>（§3.10.3）。类似地，虽然<code>null</code><strong>可能看起来</strong>是一个关键字，但在技术上是<code>null</code><strong>值</strong>（§3.10.7）。</p>
<p>java的官方文档里写着<code>true</code>,<code>false</code>,<code>null</code>是一个值，也就是说java有50个关键字，3个特殊的值。<br>竟然是值，为什么在比较的时候会报错？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="keyword">null</span>;</span><br><span class="line">        String b = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(a == b);</span><br><span class="line">        System.out.println(a.equals(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">true</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</span><br><span class="line">	at Main.Main.main(Main.java:<span class="number">14</span>)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class="number">147</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>第二个方法抛出一个空指针异常。<br>竟然是一个值，那么应该两种都会显示<code>ture</code>。</p>
<p>这样也就说明了为什么和<code>null</code>比较时要用<code>==</code>而不是<code>equals</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>返回此 ArrayList 实例的浅表复制。（不复制这些元素本身。） </p>
<p><strong>什么是浅表复制(shallow copy)</strong><br>对于shallow copy的翻译很多，有叫浅表复制，浅复制，影子复制，与它向对的是深度复制。<br><strong>浅表复制</strong><br>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span><br><span class="line">    * Returns a shallow copy of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance.  (The</span><br><span class="line">    * elements themselves are not copied.)</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@return</span> a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance</span><br><span class="line">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">           v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">           v.modCount = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">return</span> v;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">           <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="add-E"><a href="#add-E" class="headerlink" title="add(E)"></a>add(E)</h2><p>该方法是用于添加将指定元素添加到末尾，通过<code>ensureCapacityInternal()</code>这个方法来为ArrayList扩容，在为<code>elementData</code>的末尾添加指定元素。代码的注释也强调了，是增加<code>modCount</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="add-int-E"><a href="#add-int-E" class="headerlink" title="add(int,E)"></a>add(int,E)</h2><p>这个方法的一开始就调用了<code>rangCheckForAdd()</code>这个方法，这个私有方法主要是用来判断传入的索引，如果传入的数值大于最大值或者小于零会抛出一个越界异常。<code>System.arraycopy()</code>是用来复制数组的，将要添加位置之后的数组整体后移一位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="remove-Object"><a href="#remove-Object" class="headerlink" title="remove(Object)"></a>remove(Object)</h2><p>移除此列表中首次出现的指定元素（如果存在）。如果列表不包含此元素，则列表不做改动。更确切地讲，移除满足 (o==null ? get(i)==null : o.equals(get(i))) 的最低索引的元素（如果存在此类元素）。如果列表中包含指定的元素，则返回 true（或者等同于这种情况：如果列表由于调用而发生更改，则返回 true）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>通过一个循环将<code>ArrayList</code>中的元素赋值为<code>null</code>，最后将<code>size</code>赋值为0，这样应该就会保证没有浪费内存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// clear to let GC do its work</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">           elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       size = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator()"></a>ListIterator()</h2><p>用于集合遍历，如果索引大于最大值或者小于0，抛出异常，否者使用ListItr()进行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ListItr"><a href="#ListItr" class="headerlink" title="ListItr()"></a><del>ListItr()</del></h2><p>这是一个私有的内部类，继承了Iterator这个接口，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(consumer);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                consumer.accept((E) elementData[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">            cursor = i;</span><br><span class="line">            lastRet = i - <span class="number">1</span>;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a><del>replaceAll()</del></h2><p>这个方法是用来替换所有的匹配项</p>
<p>传入的参数是<code>UnaryOperator</code>是在java 8引入的lambda表达式，具体如何使用以后再说。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">     Objects.requireNonNull(operator);</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">         elementData[i] = operator.apply((E) elementData[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">     &#125;</span><br><span class="line">     modCount++;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a><del>sort()</del></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">       Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</span><br><span class="line">       <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MD5加密]]></title>
      <url>http://yoursite.com/2016/10/27/MD5%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="什么是MD5加密"><a href="#什么是MD5加密" class="headerlink" title="什么是MD5加密"></a>什么是MD5加密</h1><p>MD5加密即Message-Digest Algorithm5，历经了MD2，MD4发展，在1991年提出。</p>
<ul>
<li>中文名：消息摘要算法第五版</li>
<li>英文名：Message-Digest Algorithm5</li>
<li>提出时间：1991年</li>
</ul>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>MD5就是byte值和一个int的255进行<code>与</code>运算，得到一个int值，再将这个int值转化为十六进制的值，这样就完成了一个MD5加密。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>只能从明文加密为密文，不能把密文在转化为明文。加密后是不可逆性。确保明文的加密性。</p>
<h1 id="MD5加密代码"><a href="#MD5加密代码" class="headerlink" title="MD5加密代码"></a>MD5加密代码</h1><p>通过MD5的密文进行加密。</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String passWord = <span class="string">"123456"</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//获取数据摘要器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="comment">//将一个byte数组进行加密操作，返回的是一个加密的byte数组，二进制的哈西计算，md5加密的第一步</span></span><br><span class="line">            <span class="keyword">byte</span>[] digest = messageDigest.digest(passWord.getBytes());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> result = digest[i] &amp; <span class="number">0xff</span>;</span><br><span class="line">                <span class="comment">//将得到的int类型的值转化为16进制的值</span></span><br><span class="line">                String hexString = Integer.toHexString(result);</span><br><span class="line">                <span class="keyword">if</span> (hexString.length()&lt;<span class="number">2</span>)&#123;<span class="comment">//系统会自动把0省略，所以添加0</span></span><br><span class="line">                   sb.append(<span class="string">"0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(hexString);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;<span class="comment">//找不到加密方式异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：<br><code>e10adc3949ba59abbe56e057f20f883e</code></p>
<h1 id="防破解"><a href="#防破解" class="headerlink" title="防破解"></a>防破解</h1><p>上面的代码可以对<code>123456</code>进行加密，但是目前网上有好多破解网站，他们的破解原理就是将一些常见的<code>MD5</code>加密密文保存到数据库中，通过比对来达到所谓的破解。所以通过下面的方法进行加密会完全是网上</p>
<h2 id="不规则加密-加盐"><a href="#不规则加密-加盐" class="headerlink" title="不规则加密(加盐)"></a>不规则加密(加盐)</h2><p>通过对十六进制变量后进行不规则操作加密,在13行代码后边加数，进行不规则加密。这样会的话几乎已经无法完成破解了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String passWord = <span class="string">"123456"</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] digest = messageDigest.digest(passWord.getBytes());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> result = digest[i] &amp; <span class="number">0xff</span>;</span><br><span class="line">                String hexString = Integer.toHexString(result)+<span class="number">1</span>;<span class="comment">//不规则加密，俗称加盐</span></span><br><span class="line">                <span class="keyword">if</span> (hexString.length()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                   sb.append(<span class="string">"0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(hexString);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"密码为 123456\n 加密后"</span>);</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加密结果<br><code>e11a1dc1391491ba1591ab1be1561e01571f21f18813e1</code></p>
<h2 id="银行系统MD5加密方式"><a href="#银行系统MD5加密方式" class="headerlink" title="银行系统MD5加密方式"></a>银行系统MD5加密方式</h2><p>这种是银行等系统要求安全性非常高的系统，一般会对加密后的密文再次进行一次MD5加密，这样进行10-30次，达到一个无法破解的密文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//银行 银行卡 6位数 将密码进行十到三十次MD5加密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String passWord = <span class="string">"123456"</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">10</span>; h++) &#123; <span class="comment">//进行多次循环加密</span></span><br><span class="line">                <span class="keyword">byte</span>[] digest = messageDigest.digest(passWord.getBytes());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> result = digest[i] &amp; <span class="number">0xff</span>;</span><br><span class="line">                    String hexString = Integer.toHexString(result)+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (hexString.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                        sb.append(<span class="string">"0"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb.append(hexString);</span><br><span class="line">                &#125;</span><br><span class="line">                passWord = sb.toString();</span><br><span class="line">                sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(passWord);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加密后结果：<br><code>6912c1901801301e61951b01281ca1f21ca1dd1dc17e12a1</code></p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[StringBuilder源码分析]]></title>
      <url>http://yoursite.com/2016/10/25/StringBuilder%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>#StringBuilder源码分析</p>
<hr>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p><a href="https://wevan.github.io/about/" target="_blank" rel="external">wevan</a><br><a href="http://youngxhui.github.io/about/" target="_blank" rel="external">youngxhui</a></p>
<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>一个可变的字符序列。此类提供一个与 <code>StringBuffer</code> 兼容的 <code>API</code>，但不保证同步。该类被设计用作 <code>StringBuffer</code> 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 <code>StringBuffer</code> 要快。 </p>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>
<p>可以看到StringBuilder继承了  </p>
<ol>
<li>Serializable：可以序列化的标志。</li>
<li>CharSequence接口：包含了charAt()、length() 、subSequence()、toString()这几个方法，String类也实现了这个接口。</li>
<li>抽象类AbstractStringBuilder，这个类封装了StringBuilder和StringBuffer大部分操作的实现</li>
</ol>
<hr>
<h2 id="CharSequence接口"><a href="#CharSequence接口" class="headerlink" title="CharSequence接口"></a>CharSequence接口</h2><p>这个接口是代表一个有序字符集合，使用该接口的方法一共有四个：<code>CharBuffer</code>、<code>String</code>、<code>StringBuffer</code>、<code>StringBuilder</code>。</p>
<p>##AbstractStringBuilder类</p>
<p>变量及构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] value;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">AbstractStringBuilder() &#123;&#125;</span><br><span class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">    value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AbstractStringBuilder内部用一个char[]数组保存字符串，可以在构造的时候指定初始容量方法。</p>
<hr>
<p>###append()方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    public AbstractStringBuilder append(String str) &#123;</span><br><span class="line">        if (str == null)</span><br><span class="line">            return appendNull();</span><br><span class="line">        int len = str.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        str.getChars(0, len, value, count);</span><br><span class="line">        count += len;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line">append()方法用于追加字符，如果str是null,则会调用appendNull()方法。这个方法其实是追加了'n'、'u'、'l'、'l'这几个字符。如果不是null，则首先扩容，然后调用String的getChars()方法将str追加到value末尾。最后返回对象本身，所以append()可以连续调用。</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">##Stringbuilder构造器</span><br><span class="line"></span><br><span class="line">### StringBuilder()</span><br><span class="line"></span><br><span class="line">这个构造器的作用是构造一个初始化不带参数的，初始化字节为`16`字节。</span><br><span class="line"></span><br><span class="line">### StringBuilder(int)</span><br><span class="line"></span><br><span class="line">构造一个其中不带字符的字符串生成器，初始容量由传入的 `int` 值指定。</span><br><span class="line"></span><br><span class="line">### StringBuilder(String)</span><br><span class="line"></span><br><span class="line">构造一个字符串生成器，并初始化为指定的字符串内容。该字符串生成器的初始容量为 16 加上字符串参数的长度。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public StringBuilder(String str) &#123;</span><br><span class="line">        super(str.length() + 16);</span><br><span class="line">        append(str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>如果传入的字符串问 <code>null</code> 则会抛出空指针 <code>NullPointerException</code> 异常。<br><strong>示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderApi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="keyword">null</span>;</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">        System.out.println(stringBuilder);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<blockquote>
<p>Exception in thread “main” java.lang.NullPointerException<br>    at java.lang.StringBuilder.<init>(StringBuilder.java:112)<br>    at StringBuilderApi.main(StringBuilderApi.java:7)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</init></p>
</blockquote>
<h3 id="StringBulider-CharSequence"><a href="#StringBulider-CharSequence" class="headerlink" title="StringBulider(CharSequence)"></a>StringBulider(CharSequence)</h3><p>构造一个字符串生成器，包含与指定的 <code>CharSequence</code> 相同的字符。该字符串生成器的初始容量为 <code>16</code> 加上 <code>CharSequence</code> 参数的长度。 </p>
<hr>
<h2 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h2><p>该方法一共用13个重载函数,用于实现不同的数据类型。<code>Object</code>,<code>String</code>,<code>StringBuffer</code>,<code>CharSequence</code>,<code>char[]</code>,<code>boolen</code>,<code>int</code> ,<code>long</code>,<code>float</code>,<code>double</code> 等,但是他们的作用是一直的。那就是将参数添加到字符串中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.append(str);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(CharSequence s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.append(s);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stringbulider的appen()方法显然直接调用的父类AbstractStringBuilder中的该方法。</p>
<hr>
<h2 id="appendCodePoint-方法"><a href="#appendCodePoint-方法" class="headerlink" title="appendCodePoint()方法"></a>appendCodePoint()方法</h2><p>该方法是附加一个Uncode字符在字符串末尾。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">    * <span class="doctag">@since</span> 1.5</span><br><span class="line">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">appendCodePoint</span><span class="params">(<span class="keyword">int</span> codePoint)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.appendCodePoint(codePoint);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="delete-方法"><a href="#delete-方法" class="headerlink" title="delete()方法"></a>delete()方法</h2><p>该方法是删除所字符串中的字符，所传入的参数为其实点和结束点。直接使用父类(<code>AbstractStringBuilder</code>)的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">    * <span class="doctag">@throws</span> StringIndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span><br><span class="line">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.delete(start, end);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h2><p>toString()方法返回了一个新的String对象，与原来的对象不共享内存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Create a copy, don't share the array</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h2><p><code>replace</code> 方法仍旧继承了父类的 <code>replace</code> 方法,是替换字符<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.replace(start, end, str);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="insert-方法"><a href="#insert-方法" class="headerlink" title="insert()方法"></a>insert()方法</h2><p>该方法是插入字符串。该方法重载了12个方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该类所有的方法都是通过父类( <code>AbstractStringBuilder</code> )来实现。该方法与<code>String</code>和<code>StringBuffer</code>的区别在于，<code>String</code>是不可修改的，<code>StringBuffer</code>和<code>StringBuilder</code>是可以修改的，但是<code>StringBuffer</code>是线程安全的，<code>StringBuilder</code>是线程不安全的，但是在效率上， <code>StringBuffer</code> 因为对方法做了同步，所以一般是低于 <code>StringBuilder</code>的.</p>
<h2 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h2><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String源码剖析]]></title>
      <url>http://yoursite.com/2016/09/11/String%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>String是java程序中出现比较多的对象，分析一下String<br>首先String是由final修饰的。因此String不可变，无法继承。</p>
<blockquote>
<p>将方法或类声明为final主要目的是：确保它们不会再子类中改变语义。String类是final类，这意味着不允许任何人定义String的子类。换言之，如果有一个String的引用，它引用的一定是一个String对象，而不可能是其他类的对象。<br>——《Java核心技术 卷I》<br>作者：R eversal<br>链接：<a href="https://www.zhihu.com/question/31345592/answer/51639967" target="_blank" rel="external">https://www.zhihu.com/question/31345592/answer/51639967</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
</blockquote>
<h1 id="String不可变性及其原因"><a href="#String不可变性及其原因" class="headerlink" title="String不可变性及其原因"></a>String不可变性及其原因</h1><h2 id="String的不可变性"><a href="#String的不可变性" class="headerlink" title="String的不可变性"></a>String的不可变性</h2><p>什么叫String的不可变性呢？让我们来看一个例子。<br>        String s=“abcd“；<br>上面的语句定义了一个字符串变量s，该变量指向字符串“abcd”，当初始化变量s时，会在堆中为s非配内容空间，当将字符串变量，赋值给另一个字符串变量时，例如：String s2=s；<br>此时，s2和s是相同的字符串对象，它们指向堆中的同一个内存空间。<br>当一个字符串连接其他字符时，他就指向了新的字符串对象，例如，s=s.concat(“ef“）， 此时，s=”abcdef”;它在内存中又指向了一个新的储存空间，存放字符串”abcdef”。<br>当一个字符串在堆中被分配内容时，它就是不可变的，任何String的方法都无法改变字符串本身，但它可以返回一个新的字符串对象。<br>由于String是不可变的，所以他们的空间可以共享。例如String str = “abc”;就和<br>JAVA<br>        char data[] = {‘a’, ‘b’, ‘c’};<br>        String str = new String(data);  </p>
<p>是等价的，它们共享一个存储空间。如果需要可以修改的字符串对象，可以使用StringBuffer和StringBuilder，StringBuffer是线程安全的，由于StringBuilder不需要进行同步操作，StringBuilder是比较快速的。  </p>
<ul>
<li>String不可变性的原因  <ul>
<li>源码中String的本质是一个final类型的char数组，既然是final类型，那个该数组引用value就不允许再指向其他对象了，因此只从类的设计角度讲：如果jdk源码中并没有提供对value本身的修改，那么理论上来讲String是不可变的</li>
<li>字符串池（String pool）的需求 在Java中，当初始化一个字符串变量时，如果字符串已经存在，就不会创建一个新的字符串变量，而是返回存在字符串的引用。 例如： String string1=”abcd”; String string2=”abcd”; 这两行代码在堆中只会创建一个字符串对象。如果字符串是可变的，改变另一个字符串变量，就会使另一个字符串变量指向错误的值。  </li>
<li>缓存字符串hashcode码的需要 字符串的hashcode是经常被使用的，字符串的不变性确保了hashcode的值一直是一样的，在需要hashcode时，就不需要每次都计算，这样会很高效。   </li>
<li>出于安全性考虑 字符串经常作为网络连接、数据库连接等参数，不可变就可以保证连接的安全性。</li>
</ul>
</li>
</ul>
<h1 id="签名（signature）"><a href="#签名（signature）" class="headerlink" title="签名（signature）"></a>签名（signature）</h1><hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>
<p>String使用了</p>
<ul>
<li>标记接口 java.io.Serializable</li>
<li>标记接口 Comparable</li>
<li>标记接口 CharSequenc</li>
</ul>
<h2 id="Compareable接口"><a href="#Compareable接口" class="headerlink" title="Compareable接口"></a>Compareable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此接口强行对实现它的每个类的对象进行整体排序。此排序被称为该类的自然排序，类的 <code>compareTo</code> 方法被称为它的自然比较方法 。</p>
<h2 id="CharSequence接口"><a href="#CharSequence接口" class="headerlink" title="CharSequence接口"></a>CharSequence接口</h2><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/charsequence.png" alt=""><br>CharSequence的所有成员变量和方法。</p>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><ul>
<li>private final char value[];//这是用于存储String字符的数组  </li>
<li>private final int offset;//这是value数组的第一个有效的字符的index  </li>
<li>private final int count;//这是String中的字符个数  </li>
<li>private int hash; // 存储String的hashcode，默认是0  </li>
<li>private static final long serialVersionUID = -6849794470754667710L;//在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常</li>
</ul>
<hr>
<h1 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p><code>String</code>类的构造器有十六个，除了提供了一个无参构造函数之外，还有十五个带参构造器。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/String%E6%9E%84%E9%80%A0%E5%99%A8.png" alt=""></p>
<h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>初始化一个新创建的 String 对象，使其表示一个空字符序列。注意，由于 String 是不可变的，所以无需使用此构造方法</p>
<h3 id="String-String"><a href="#String-String" class="headerlink" title="String(String)"></a>String(String)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化一个新创建的 String对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。由于 String 是不可变的，所以无需使用此构造方法，除非需要 original 的显式副本。</p>
<h3 id="String-char"><a href="#String-char" class="headerlink" title="String(char)"></a>String(char)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。该字符数组的内容已被复制；后续对字符数组的修改不会影响新创建的字符串。 </p>
<h3 id="String-char-int-int"><a href="#String-char-int-int" class="headerlink" title="String(char,int,int)"></a>String(char,int,int)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (offset &lt;= value.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>作用为分配一个新的value，将传入的char数组进行一次复制，offset是开始索引位置，count表示数组长度。</p>
<h3 id="String-int-int-int"><a href="#String-int-int-int" class="headerlink" title="String(int,int,int)"></a>String(int,int,int)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (offset &lt;= codePoints.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">        <span class="keyword">if</span> (offset &gt; codePoints.length - count) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> end = offset + count;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass 1: Compute precise size of char[]</span></span><br><span class="line">        <span class="keyword">int</span> n = count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">            <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Character.isValidCodePoint(c))</span><br><span class="line">                n++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(Integer.toString(c));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass 2: Allocate and fill in char[]</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">char</span>[] v = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset, j = <span class="number">0</span>; i &lt; end; i++, j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">            <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">                v[j] = (<span class="keyword">char</span>)c;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Character.toSurrogates(c, v, j++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = v;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="checkBounds-方法"><a href="#checkBounds-方法" class="headerlink" title="checkBounds()方法"></a>checkBounds()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkBounds</span><span class="params">(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(length);</span><br><span class="line">        <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">        <span class="keyword">if</span> (offset &gt; bytes.length - length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这是一个私有的静态方法用于检查边界的方法。</p>
<h3 id="length-方法"><a href="#length-方法" class="headerlink" title="length()方法"></a>length()方法</h3><p>获得长度的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> value.length;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="isEmpty-方法"><a href="#isEmpty-方法" class="headerlink" title="isEmpty()方法"></a>isEmpty()方法</h3><p>检查字符串长度是否是0，当长度为0返回true，否则返回false。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> value.length == <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="charAt-方法"><a href="#charAt-方法" class="headerlink" title="charAt()方法"></a>charAt()方法</h3><p>该方法返回的值为char数组中的其中一个。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> value[index];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="codePointAt-方法"><a href="#codePointAt-方法" class="headerlink" title="codePointAt()方法"></a>codePointAt()方法</h3><p>用于返回指定索引处的字符，与<code>codePointBefore</code>方法类似，<code>codePointBefore</code>返回的的是索引之前的值</p>
<p><strong>codePointAt</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((index &lt; <span class="number">0</span>) || (index &gt;= value.length)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Character.codePointAtImpl(value, index, value.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>codePointBefore</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointBefore</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((i &lt; <span class="number">0</span>) || (i &gt;= value.length)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Character.codePointBeforeImpl(value, index, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h3><p>首先<code>equals</code>返回的为一个<code>boolean</code>值。<br><code>instanceof</code>是一个<code>java</code>的二元操作符，作用是检查左面是否为右面的实例化。返回值是<code>boolean</code>类型。<br>该方法是将一个传入对象进行一次复制，将复制对象的字符数组与原对象的字符数组进行比较。<br>这样就确保<code>equals</code>比较的是内容。这样就和<code>==</code>有了区分</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="compareTo-方法"><a href="#compareTo-方法" class="headerlink" title="compareTo()方法"></a>compareTo()方法</h3><p>按字典顺序比较两个字符串,如果相通返回0，如果不同返回他们之间的差值。<br>同样是通过字符数组进行比较。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">        <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">        <span class="keyword">char</span> v1[] = value;</span><br><span class="line">        <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">            <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">            <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                <span class="keyword">return</span> c1 - c2;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len1 - len2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><del>### compare()方法</del></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CaseInsensitiveComparator</span></span><br><span class="line">            <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="comment">// use serialVersionUID from JDK 1.2.2 for interoperability</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8575799808933029326L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = s1.length();</span><br><span class="line">            <span class="keyword">int</span> n2 = s2.length();</span><br><span class="line">            <span class="keyword">int</span> min = Math.min(n1, n2);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min; i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c1 = s1.charAt(i);</span><br><span class="line">                <span class="keyword">char</span> c2 = s2.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                    c1 = Character.toUpperCase(c1);</span><br><span class="line">                    c2 = Character.toUpperCase(c2);</span><br><span class="line">                    <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                        c1 = Character.toLowerCase(c1);</span><br><span class="line">                        c2 = Character.toLowerCase(c2);</span><br><span class="line">                        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                            <span class="comment">// No overflow because of numeric promotion</span></span><br><span class="line">                            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n1 - n2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Replaces the de-serialized object. */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> CASE_INSENSITIVE_ORDER; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="startsWith-方法"><a href="#startsWith-方法" class="headerlink" title="startsWith()方法"></a>startsWith()方法</h3><p>检查前缀是否匹配。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ta[] = value;</span><br><span class="line">        <span class="keyword">int</span> to = toffset;</span><br><span class="line">        <span class="keyword">char</span> pa[] = prefix.value;</span><br><span class="line">        <span class="keyword">int</span> po = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pc = prefix.value.length;</span><br><span class="line">        <span class="comment">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">        <span class="keyword">if</span> ((toffset &lt; <span class="number">0</span>) || (toffset &gt; value.length - pc)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--pc &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h3><p>返回String的hashCode，hashCode的计算方法是<code>s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hash;</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> val[] = value;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">                h = <span class="number">31</span> * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="indexOf方法"><a href="#indexOf方法" class="headerlink" title="indexOf方法"></a>indexOf方法</h3><p><code>indexOf</code>一共有六个构造方法。<br>返回字符出现在字符串中第一次的位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> max = value.length;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            fromIndex = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fromIndex &gt;= max) &#123;</span><br><span class="line">            <span class="comment">// Note: fromIndex might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT) &#123;</span><br><span class="line">            <span class="comment">// handle most cases here (ch is a BMP code point or a</span></span><br><span class="line">            <span class="comment">// negative value (invalid code point))</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">char</span>[] value = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = fromIndex; i &lt; max; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value[i] == ch) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> indexOfSupplementary(ch, fromIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="substring-方法"><a href="#substring-方法" class="headerlink" title="substring()方法"></a>substring()方法</h3><p>截取代码中的片段，值得注意的是在最后的返回值中它会new一个新String类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">        <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">                : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h3><p>该方法主要用于连接字符串，Api文档中的例子</p>
<blockquote>
<p>“cares”.concat(“s”) returns “caress”</p>
</blockquote>
<p>从功能上看<code>concat</code>和<code>+</code>是类似的。但是他们之间使用区别的。<br><code>concat</code>只能连接字符串，如果要连接其他类型要转化为String。<br><code>+</code>可以连接非字符串。<br>如果长度为0返回原来的数组，否则就new一个数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">       <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> len = value.length;</span><br><span class="line">       <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">       str.getChars(buf, len);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><del>### replace()方法</del> </p>
<p>replace用于替换String中的字符。<br>先用if来判断，来减少不必要的循环。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oldChar != newChar) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = value.length;</span><br><span class="line">            <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span>[] val = value; <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (++i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val[i] == oldChar) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    buf[j] = val[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">                    <span class="keyword">char</span> c = val[i];</span><br><span class="line">                    buf[i] = (c == oldChar) ? newChar : c;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><del>### split</del></p>
<p><del>### replaceAll</del></p>
<h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h3><p>这个是jdk1.8的新方法，让我们分析一下。<br>join的作用：通过一个字符或字符串来连接其他字符<br>注释文档的例子：</p>
<blockquote>
<p>String message = String.join(“-“, “Java”, “is”, “cool”);<br>         // message returned is: “Java-is-cool”</p>
</blockquote>
<p>官方文档中的注释提示</p>
<blockquote>
<p><strong> Note that if an element is null, then {@code “null”} is added.</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">join</span><span class="params">(CharSequence delimiter, CharSequence... elements)</span> </span>&#123;</span><br><span class="line">       Objects.requireNonNull(delimiter);</span><br><span class="line">       Objects.requireNonNull(elements);</span><br><span class="line">       <span class="comment">// Number of elements not likely worth Arrays.stream overhead.</span></span><br><span class="line">       StringJoiner joiner = <span class="keyword">new</span> StringJoiner(delimiter);</span><br><span class="line">       <span class="keyword">for</span> (CharSequence cs: elements) &#123;</span><br><span class="line">           joiner.add(cs);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> joiner.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><del>### toLowerCase()方法</del></p>
<p>该方法是将传入的字符串转化为一个小写的字符串。<br>这里有一个<code>scan</code>，这个<code>scan</code>是一个标签，用于跳出循环。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (locale == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> firstUpper;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> len = value.length;</span><br><span class="line">    <span class="comment">/* Now check if there are any characters that need to be changed. */</span></span><br><span class="line">    scan: &#123;</span><br><span class="line">        <span class="keyword">for</span> (firstUpper = <span class="number">0</span> ; firstUpper &lt; len; ) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = value[firstUpper];</span><br><span class="line">            <span class="keyword">if</span> ((c &gt;= Character.MIN_HIGH_SURROGATE)</span><br><span class="line">                    &amp;&amp; (c &lt;= Character.MAX_HIGH_SURROGATE)) &#123;</span><br><span class="line">                <span class="keyword">int</span> supplChar = codePointAt(firstUpper);</span><br><span class="line">                <span class="keyword">if</span> (supplChar != Character.toLowerCase(supplChar)) &#123;</span><br><span class="line">                    <span class="keyword">break</span> scan;</span><br><span class="line">                &#125;</span><br><span class="line">                firstUpper += Character.charCount(supplChar);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (c != Character.toLowerCase(c)) &#123;</span><br><span class="line">                    <span class="keyword">break</span> scan;</span><br><span class="line">                &#125;</span><br><span class="line">                firstUpper++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">    <span class="keyword">int</span> resultOffset = <span class="number">0</span>;  <span class="comment">/* result may grow, so i+resultOffset</span><br><span class="line">                            * is the write location in result */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Just copy the first few lowerCase characters. */</span></span><br><span class="line">    System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, firstUpper);</span><br><span class="line"></span><br><span class="line">    String lang = locale.getLanguage();</span><br><span class="line">    <span class="keyword">boolean</span> localeDependent =</span><br><span class="line">            (lang == <span class="string">"tr"</span> || lang == <span class="string">"az"</span> || lang == <span class="string">"lt"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] lowerCharArray;</span><br><span class="line">    <span class="keyword">int</span> lowerChar;</span><br><span class="line">    <span class="keyword">int</span> srcChar;</span><br><span class="line">    <span class="keyword">int</span> srcCount;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = firstUpper; i &lt; len; i += srcCount) &#123;</span><br><span class="line">        srcChar = (<span class="keyword">int</span>)value[i];</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">char</span>)srcChar &gt;= Character.MIN_HIGH_SURROGATE</span><br><span class="line">                &amp;&amp; (<span class="keyword">char</span>)srcChar &lt;= Character.MAX_HIGH_SURROGATE) &#123;</span><br><span class="line">            srcChar = codePointAt(i);</span><br><span class="line">            srcCount = Character.charCount(srcChar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            srcCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (localeDependent ||</span><br><span class="line">            srcChar == <span class="string">'\u03A3'</span> || <span class="comment">// GREEK CAPITAL LETTER SIGMA</span></span><br><span class="line">            srcChar == <span class="string">'\u0130'</span>) &#123; <span class="comment">// LATIN CAPITAL LETTER I WITH DOT ABOVE</span></span><br><span class="line">            lowerChar = ConditionalSpecialCasing.toLowerCaseEx(<span class="keyword">this</span>, i, locale);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lowerChar = Character.toLowerCase(srcChar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((lowerChar == Character.ERROR)</span><br><span class="line">                || (lowerChar &gt;= Character.MIN_SUPPLEMENTARY_CODE_POINT)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowerChar == Character.ERROR) &#123;</span><br><span class="line">                lowerCharArray =</span><br><span class="line">                        ConditionalSpecialCasing.toLowerCaseCharArray(<span class="keyword">this</span>, i, locale);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (srcCount == <span class="number">2</span>) &#123;</span><br><span class="line">                resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lowerCharArray = Character.toChars(lowerChar);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Grow result if needed */</span></span><br><span class="line">            <span class="keyword">int</span> mapLen = lowerCharArray.length;</span><br><span class="line">            <span class="keyword">if</span> (mapLen &gt; srcCount) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] result2 = <span class="keyword">new</span> <span class="keyword">char</span>[result.length + mapLen - srcCount];</span><br><span class="line">                System.arraycopy(result, <span class="number">0</span>, result2, <span class="number">0</span>, i + resultOffset);</span><br><span class="line">                result = result2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mapLen; ++x) &#123;</span><br><span class="line">                result[i + resultOffset + x] = lowerCharArray[x];</span><br><span class="line">            &#125;</span><br><span class="line">            resultOffset += (mapLen - srcCount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i + resultOffset] = (<span class="keyword">char</span>)lowerChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result, <span class="number">0</span>, len + resultOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="trim-方法"><a href="#trim-方法" class="headerlink" title="trim()方法"></a>trim()方法</h3><p>trim方法是去除前或后无效空格。<br>通过两个循环，一个从前开始，一个从后开始来寻找空格。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = value.length;</span><br><span class="line">        <span class="keyword">int</span> st = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] val = value;    <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[st] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">            st++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ((st &lt; len) &amp;&amp; (val[len - <span class="number">1</span>] &lt;= <span class="string">' '</span>)) &#123;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((st &gt; <span class="number">0</span>) || (len &lt; value.length)) ? substring(st, len) : <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="toCharArray-方法"><a href="#toCharArray-方法" class="headerlink" title="toCharArray()方法"></a>toCharArray()方法</h3><p>该方法是用于将字符串复制为一个新的字符数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray() &#123;</span><br><span class="line">        <span class="comment">// Cannot use Arrays.copyOf because of class initialization order issues</span></span><br><span class="line">        <span class="keyword">char</span> result[] = <span class="keyword">new</span> <span class="keyword">char</span>[value.length];</span><br><span class="line">        System.arraycopy(value, <span class="number">0</span>, result, <span class="number">0</span>, value.length);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="intern方法"><a href="#intern方法" class="headerlink" title="intern方法"></a>intern方法</h3><p>native关键字是一个用于修饰原生态方法。作用是实现其他接口的语言如(c/c++)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程(四)]]></title>
      <url>http://yoursite.com/2016/08/28/GitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Github-for-windows使用教程-四"><a href="#Github-for-windows使用教程-四" class="headerlink" title="Github for windows使用教程(四)"></a>Github for windows使用教程(四)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上述的几个教程里讲解了一些Github的基础使用，现在开始讲解一些使用技巧。</p>
<h2 id="查找内容"><a href="#查找内容" class="headerlink" title="查找内容"></a>查找内容</h2><p>在github页面上是没有搜索的按钮，如何搜索呢。<br>在网页上按 <code>T</code>就会出现。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%9F%A5%E6%89%BET.png" alt=""><br>这样我们就能很方便的查找到我们需要的代码了。</p>
<h2 id="评论小表情"><a href="#评论小表情" class="headerlink" title="评论小表情"></a>评论小表情</h2><p>常常在<strong>版本描述</strong>或者<strong>pull request</strong>时我们需要对伙伴的代码进行一下评论与说明，光是文字有点很死板，其实github给我有<strong>emoji</strong>，如何使用呢？其实很简单，只需要<strong>冒号</strong>就可以 <code>：</code>，这样我们就可以看到emoji表情，当然默认会显示五个常用的，你也可以继续敲下emoji的名字，出现更多（<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">这里有所有的表情</a>）。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%AE%A2%E6%88%B7%E7%AB%AFemoji.png" alt=""><br><img src="http://7xt81u.com1.z0.glb.clouddn.com/emoji.png" alt=""></p>
<h2 id="忽略不想上传的文件"><a href="#忽略不想上传的文件" class="headerlink" title="忽略不想上传的文件"></a>忽略不想上传的文件</h2><p>有些在github中的文件我们是不想上传的，我们如何过滤掉它们呢？<br>在github中对不想上传的文件点击右键。就会出现下面选项。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%BF%BD%E7%95%A5.png" alt=""><br><strong>Ignore file</strong>忽略这个文件<br><strong>Ignore all.txt files</strong> 忽略所有的以.txt结尾的文件<br>这样就可以过滤掉你不想上传的文件</p>
<h2 id="搜索项目"><a href="#搜索项目" class="headerlink" title="搜索项目"></a>搜索项目</h2><p>如何高效的搜索一个你想要的库呢？<br>我们常常评判一个项目的标准有star数目，fork数目和跟新时间。<br>通过搜索命令</p>
<p><strong>stars</strong></p>
<pre><code>stars:&gt;1000
</code></pre><p>表示star数目大于1000。</p>
<p><strong>fork</strong></p>
<pre><code>fork:&gt;1000
</code></pre><p>表示fork数目大于1000。</p>
<p><strong>语言搜索</strong></p>
<p>java，html等等</p>
<p>综合一下就是，比如你要查找一个stars大于1000的，fork大于200的java代码。</p>
<pre><code>stars:&gt;1000 fork:&gt;200 java
</code></pre><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%90%9C%E7%B4%A2.png" alt=""></p>
<p>就是这样。</p>
<h2 id="查看项目中的语言类型"><a href="#查看项目中的语言类型" class="headerlink" title="查看项目中的语言类型"></a>查看项目中的语言类型</h2><p>一个项目中，可能使用了多种语言，我们如何一下子就能看到一个项目使用了什么语言？其实很简单，Github已经为我们统计好了。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%9C%8B.png" alt=""></p>
<p>也行你注意过，但是没有发现它有什么用。<br>点击下面的彩条</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/BaiduShurufa_2016-9-4_22-25-50.png" alt=""></p>
<p>github已经为我们统计好这个项目所有的语言及其比例。</p>
<p>一些常见的代码表示颜色</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/BaiduShurufa_2016-9-24_17-7-2.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>码字不易，终于写完了，如果觉得对你有帮助，我的目的就达到了。<br>谢谢<br>如有错误，还望指正。</p>
<h2 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h2><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git基本操作]]></title>
      <url>http://yoursite.com/2016/08/13/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="下载安装Git客户端"><a href="#下载安装Git客户端" class="headerlink" title="下载安装Git客户端"></a>下载安装Git客户端</h2><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/git.png" alt="Git"></p>
<p><a href="https://git-scm.com/download" target="_blank" rel="external">git</a>下载</p>
<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>装完成后，还需要最后一步设置，在命令行输入：</p>
<pre><code>$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;email@example.com&quot;
</code></pre><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>
<h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><pre><code>$ git init
</code></pre><h2 id="添加-add"><a href="#添加-add" class="headerlink" title="添加 add"></a>添加 add</h2><h3 id="把文件添加到仓库："><a href="#把文件添加到仓库：" class="headerlink" title="把文件添加到仓库："></a>把文件添加到仓库：</h3><pre><code>$ git add readme.txt
</code></pre><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<h3 id="把文件提交到仓库："><a href="#把文件提交到仓库：" class="headerlink" title="把文件提交到仓库："></a>把文件提交到仓库：</h3><pre><code>$ git commit -m &quot;add readme&quot;
</code></pre><p><code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<h2 id="同步到Github"><a href="#同步到Github" class="headerlink" title="同步到Github"></a>同步到Github</h2><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>例如我们给一个叫Test的仓库同步</p>
<pre><code>$ git remote add origin git@github.com:youngxhui/Test.git
</code></pre><p>现在可以push到你的仓库了</p>
<pre><code>$ git push -u origin master
</code></pre><p>第一次推送时，我们要添加<code>-u</code></p>
<p>之后我们可以这条命令</p>
<pre><code>$ git push origin master
</code></pre><h3 id="下载到github"><a href="#下载到github" class="headerlink" title="下载到github"></a>下载到github</h3><p>从github上下载到本地</p>
<pre><code>$ git clone git@github.com:youngxhui/nuc_JavaLab.git
</code></pre><h2 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h2><h3 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h3><p>创建分支</p>
<pre><code>$ git checkout -b dev
</code></pre><p><code>-b</code> 参数表示创建并切换</p>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>用git branch命令查看当前分支：</p>
<pre><code>$ git branch
* dev
master
</code></pre><p>git branch命令会列出所有分支，<strong>当前分支</strong>前面会标一个<code>*</code>号。</p>
<p>我们就可以在dev分支上正常提交</p>
<pre><code>$ git add readme.txt 

$ git commit -m &quot;branch test&quot;
</code></pre><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>切换回master分支：</p>
<pre><code>$ git checkout master
</code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>把<code>dev</code>分支合并到<code>master</code></p>
<pre><code>$ git merge dev
</code></pre><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><pre><code>$ git branch -d dev
</code></pre><hr>
<h2 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h2><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>http://yoursite.com/2016/08/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><blockquote>
<p><a href="http://baike.baidu.com/link?url=Os-gO7uRt5qvqvM1ibNbtqYJw6ABNumxNHTGVmJZP7JSUy3mCygBSnhUN-zQG6s3X1G3jK47uXqH4jzojaTbGa" target="_blank" rel="external">正则表达式，又称<strong>正规表示法</strong>、<strong>常规表示法</strong>（英语：<em>Regular Expression</em>，在代码中常简写为<em>regex、regexp</em>或<em>RE</em>），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。</a></p>
</blockquote>
<p>正则表达式可以对字符串进行查找，提取，分割，替换等操作。</p>
<h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>正则表达式就是一个用于匹配字符串的模板，可以匹配一串字符串，所以创造正则表达式就是创建一个特殊字符串。<br><strong>正则表达式所支持的合法字符</strong></p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:right">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td style="text-align:right">字符x（x可代表任何合法的字符）</td>
</tr>
<tr>
<td>\0mnn</td>
<td style="text-align:right">八进制数用\0mnn</td>
</tr>
<tr>
<td>\xhh</td>
<td style="text-align:right">十六进制值0xhh所表示的字符</td>
</tr>
<tr>
<td>\xhhh</td>
<td style="text-align:right">十六进制值0xhhhh所表示的Unicode字符</td>
</tr>
<tr>
<td>\t</td>
<td style="text-align:right">制表符（’\u0009’）</td>
</tr>
<tr>
<td>\n</td>
<td style="text-align:right">新行（换行）符(‘\u000A’)</td>
</tr>
<tr>
<td>\r</td>
<td style="text-align:right">回车符（’\u000D’）</td>
</tr>
<tr>
<td>\f</td>
<td style="text-align:right">换页符（’\u000C’）</td>
</tr>
<tr>
<td>\a</td>
<td style="text-align:right">报警（bell）符（’\u0007’）</td>
</tr>
<tr>
<td>\e</td>
<td style="text-align:right">Escape符（’\u001B’）</td>
</tr>
<tr>
<td>\cx</td>
<td style="text-align:right">x对应的控制符。例如，\cM 匹配ctrl-M。x值必须为A-Z或者a~z之一</td>
</tr>
</tbody>
</table>
<p><strong>正则表达式中的特殊字符</strong></p>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th style="text-align:right">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$</td>
<td style="text-align:right">匹配一行的结尾。要匹配\$字符本身</td>
</tr>
<tr>
<td>^</td>
<td style="text-align:right">匹配一行的开头。要匹配^字符本身</td>
</tr>
<tr>
<td>()</td>
<td style="text-align:right">标记子表达式的开始和结束位置。要用匹配这些字符。</td>
</tr>
<tr>
<td>[]</td>
<td style="text-align:right">用于确定中括号表达式的开始和结束位置。</td>
</tr>
<tr>
<td>{}</td>
<td style="text-align:right">用于标记前面子表达式的出现频率</td>
</tr>
<tr>
<td>*</td>
<td style="text-align:right">指定前面子表达式出现零次或多次</td>
</tr>
<tr>
<td>+</td>
<td style="text-align:right">指定前面子表达式可以出现一次或多次</td>
</tr>
<tr>
<td>?</td>
<td style="text-align:right">指定前面子表达式可以出现零次或一次</td>
</tr>
<tr>
<td>.</td>
<td style="text-align:right">匹配除换行符\n之外的任何单字符</td>
</tr>
<tr>
<td>\</td>
<td style="text-align:right">用于转义下一个字符，或指定八进制，十六进制字符。</td>
</tr>
<tr>
<td>\</td>
<td style="text-align:right">指定两项之间任选一项</td>
</tr>
</tbody>
</table>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[底部导航按钮]]></title>
      <url>http://yoursite.com/2016/08/05/%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%8C%89%E9%92%AE/</url>
      <content type="html"><![CDATA[<h1 id="关于底部按钮的实现"><a href="#关于底部按钮的实现" class="headerlink" title="关于底部按钮的实现"></a>关于底部按钮的实现</h1><p>关于底部导航按钮网上实现底部按钮的方法有很多，在这里RadioGroup+ViewPager+fragmnt实现的。</p>
<p>底部导航支持底部点击和滑动。</p>
<p>上图</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/S60805-173456.jpg" alt="效果图"></p>
<p>布局代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rg_tab_bar"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"56dp"</span></span><br><span class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:background</span>=<span class="string">"@color/bg_white"</span></span><br><span class="line">        <span class="attr">android:elevation</span>=<span class="string">"5dp"</span></span><br><span class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/rb_channel"</span></span><br><span class="line">            <span class="attr">style</span>=<span class="string">"@style/tab_menu_item"</span></span><br><span class="line">            <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/tab_menu_doc"</span></span><br><span class="line">            <span class="attr">android:text</span>=<span class="string">"@string/tab_menu_doc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/rb_message"</span></span><br><span class="line">            <span class="attr">style</span>=<span class="string">"@style/tab_menu_item"</span></span><br><span class="line">            <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/tab_menu_camera"</span></span><br><span class="line">            <span class="attr">android:text</span>=<span class="string">"@string/tab_menu_camera"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/rb_better"</span></span><br><span class="line">            <span class="attr">style</span>=<span class="string">"@style/tab_menu_item"</span></span><br><span class="line">            <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/tab_menu_user"</span></span><br><span class="line">            <span class="attr">android:text</span>=<span class="string">"@string/tab_menu_user"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/div_tab_bar"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"2px"</span></span><br><span class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@id/rg_tab_bar"</span></span><br><span class="line">        <span class="attr">android:background</span>=<span class="string">"@color/div_white"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/vpager"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@id/div_tab_bar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>activity代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">RadioGroup</span>.<span class="title">OnCheckedChangeListener</span>,</span><br><span class="line">        <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//UI Objects</span></span><br><span class="line">    <span class="keyword">private</span> RadioGroup rg_tab_bar;</span><br><span class="line">    <span class="keyword">private</span> RadioButton rb_channel;</span><br><span class="line">    <span class="keyword">private</span> RadioButton rb_message;</span><br><span class="line">    <span class="keyword">private</span> RadioButton rb_better;</span><br><span class="line">    <span class="keyword">private</span> ViewPager vpager;</span><br><span class="line">    <span class="keyword">private</span> MyFragmentPagerAdapter mAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//几个代表页面的常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_ONE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_TWO = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_THREE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mAdapter = <span class="keyword">new</span> MyFragmentPagerAdapter(getSupportFragmentManager());</span><br><span class="line">        bindViews();</span><br><span class="line">        rb_channel.setChecked(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        rg_tab_bar = (RadioGroup) findViewById(R.id.rg_tab_bar);</span><br><span class="line">        rb_channel = (RadioButton) findViewById(R.id.rb_channel);</span><br><span class="line">        rb_message = (RadioButton) findViewById(R.id.rb_message);</span><br><span class="line">        rb_better = (RadioButton) findViewById(R.id.rb_better);</span><br><span class="line">        rg_tab_bar.setOnCheckedChangeListener(<span class="keyword">this</span>);</span><br><span class="line">        vpager = (ViewPager) findViewById(R.id.vpager);</span><br><span class="line">        vpager.setAdapter(mAdapter);</span><br><span class="line">        vpager.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">        vpager.addOnPageChangeListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (checkedId) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.rb_channel:</span><br><span class="line">                vpager.setCurrentItem(PAGE_ONE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.rb_message:</span><br><span class="line">                vpager.setCurrentItem(PAGE_TWO);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.rb_better:</span><br><span class="line">                vpager.setCurrentItem(PAGE_THREE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写ViewPager页面切换的处理方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//state的状态有三个，0表示什么都没做，1正在滑动，2滑动完毕</span></span><br><span class="line">        <span class="keyword">if</span> (state == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (vpager.getCurrentItem()) &#123;</span><br><span class="line">                <span class="keyword">case</span> PAGE_ONE:</span><br><span class="line">                    rb_channel.setChecked(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> PAGE_TWO:</span><br><span class="line">                    rb_message.setChecked(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> PAGE_THREE:</span><br><span class="line">                    rb_better.setChecked(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FragmentPagerAdapter数据适配器</p>
<p>MyFragmentPagerAdapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGER_COUNT = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> DocFRAG docFRAG = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> CameraFRAG cameraFRAG = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> UserFRAG userFRAG = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFragmentPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">        docFRAG = <span class="keyword">new</span> DocFRAG();</span><br><span class="line">        cameraFRAG = <span class="keyword">new</span> CameraFRAG();</span><br><span class="line">        userFRAG = <span class="keyword">new</span> UserFRAG();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PAGER_COUNT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup vg, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.instantiateItem(vg, position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"position Destory"</span> + position);</span><br><span class="line">        <span class="keyword">super</span>.destroyItem(container, position, object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Fragment fragment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">            <span class="keyword">case</span> MainActivity.PAGE_ONE:</span><br><span class="line">                fragment = docFRAG;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MainActivity.PAGE_TWO:</span><br><span class="line">                fragment = cameraFRAG;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MainActivity.PAGE_THREE:</span><br><span class="line">                fragment = userFRAG;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FlaotActionButton详解]]></title>
      <url>http://yoursite.com/2016/08/05/FlaotActionButton%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<pre><code>今天把Android的学习的一些东西记录一下，方便日后使用。
</code></pre><h1 id="FlaotActionButton详解"><a href="#FlaotActionButton详解" class="headerlink" title="FlaotActionButton详解"></a>FlaotActionButton详解</h1><p>FlaotActionButton是android的一个很好用的控件。<br>在看了很多源码后逐步掌握一些知识了。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/5798408d91ee074073000000.gif" alt=""></p>
<h2 id="导入依赖项"><a href="#导入依赖项" class="headerlink" title="导入依赖项"></a>导入依赖项</h2><p>首先要在build.gradle中导入依赖项</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.1.1'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:24.1.1'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.getbase:floatingactionbutton:1.10.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/futuresimple/android-floating-action-button" target="_blank" rel="external">GitHub地址</a></p>
<p>代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionsMenu</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:layout_alignParentEnd</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"31dp"</span></span><br><span class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"32dp"</span></span><br><span class="line">        <span class="attr">app:fab_addButtonSize</span>=<span class="string">"normal"</span></span><br><span class="line">        <span class="attr">app:fab_labelStyle</span>=<span class="string">"@style/menu_labels_style"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab_carm"</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">app:backgroundTint</span>=<span class="string">"@color/colorPrimary"</span></span><br><span class="line">            <span class="attr">app:fabSize</span>=<span class="string">"mini"</span></span><br><span class="line">            <span class="attr">app:fab_title</span>=<span class="string">"拍照"</span></span><br><span class="line">            <span class="attr">fab:fab_icon</span>=<span class="string">"@drawable/ic_add_a_photo_black_24dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab_etid"</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">app:fabSize</span>=<span class="string">"mini"</span></span><br><span class="line">            <span class="attr">app:fab_title</span>=<span class="string">"录入"</span></span><br><span class="line">            <span class="attr">fab:fab_icon</span>=<span class="string">"@drawable/ic_border_color_black_24dp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.getbase.floatingactionbutton.FloatingActionButton</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/fab_pic"</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">app:fabSize</span>=<span class="string">"mini"</span></span><br><span class="line">            <span class="attr">app:fab_title</span>=<span class="string">"识别图片"</span></span><br><span class="line">            <span class="attr">fab:fab_icon</span>=<span class="string">"@drawable/ic_photo_black_24dp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.getbase.floatingactionbutton.FloatingActionsMenu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要适配<code>menu_labels_style</code>才可以使用FloatingActionsMenu<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"menu_labels_style"</span>&gt;</span><span class="xml"></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@drawable/fab_label_background<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>适配<code>fab_label_background</code></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;solid android:color=&quot;@color/black_semi_transparent&quot;/&gt;
    &lt;padding
        android:left=&quot;16dp&quot;
        android:top=&quot;4dp&quot;
        android:right=&quot;16dp&quot;
        android:bottom=&quot;4dp&quot;/&gt;
    &lt;corners
        android:radius=&quot;2dp&quot;/&gt;
&lt;/shape&gt;
</code></pre><h2 id="解析FloatActionButton代码"><a href="#解析FloatActionButton代码" class="headerlink" title="解析FloatActionButton代码"></a>解析FloatActionButton代码</h2><p>FloatActionButton中<br>通过<strong>app:fabSize</strong>来确定大小<strong>normal</strong>，<strong>mini</strong>，<strong>auto</strong>。<br>通过<strong>app:fab_title</strong>设置文字。<br><strong>fab:fab_icon</strong>设置图标。</p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AndroidManifest.xml详细介绍]]></title>
      <url>http://yoursite.com/2016/07/21/AndroidManifest-xml%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>#AndroidManifest.xml详细介绍</p>
<p><strong>基于Android Studio 2.1目录 </strong></p>
<h2 id="一、关于AndroidManifest-xml"><a href="#一、关于AndroidManifest-xml" class="headerlink" title="一、关于AndroidManifest.xml"></a>一、关于AndroidManifest.xml</h2><p>AndroidManifest.xml是每个android程序中必须的文件。是一个清单文件。它位项目的manifes目录，它是整个Android应用的描述文件。AndroidManifast.xml清单文件说明了该应用的名称，所使用的图标等。</p>
<p>AndroidManifest.xml清单文件通常包含以下的信息：</p>
<blockquote>
<p>1.应用程序的包名。</p>
<ol>
<li>应用所含的组件，如Activity，Service，BroadcastReceiver和ContentProvider等。</li>
<li>应用程序兼容的最低版本。</li>
<li>应用要使用的权限。<br>5.其他程序访问该应用需要的权限。</li>
</ol>
</blockquote>
<h2 id="二、AndroidManifest-xml结构"><a href="#二、AndroidManifest-xml结构" class="headerlink" title="二、AndroidManifest.xml结构"></a>二、AndroidManifest.xml结构</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xmlversion="1.0"encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">activity</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">action</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">category</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">meta-data</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">       <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">meta-data</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">receiver</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">meta-data</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">provider</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">grant-uri-permission</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">meta-data</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">uses-library</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission-tree</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission-group</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instrumentation</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-configuration</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">supports-screens</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="三、各个节点的详细介绍"><a href="#三、各个节点的详细介绍" class="headerlink" title="三、各个节点的详细介绍"></a>三、各个节点的详细介绍</h2><p> 上面就是整个androidManifest.xml的结构，下面以外向内开始阐述～～</p>
<h3 id="1、第一层-Manifest属性"><a href="#1、第一层-Manifest属性" class="headerlink" title="1、第一层:Manifest属性"></a>1、第一层:Manifest属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">          <span class="attr">package</span>=<span class="string">"com.woody.test"</span></span><br><span class="line">          <span class="attr">android:sharedUserId</span>=<span class="string">"string"</span></span><br><span class="line">          <span class="attr">android:sharedUserLabel</span>=<span class="string">"string resource"</span></span><br><span class="line">          <span class="attr">android:versionCode</span>=<span class="string">"integer"</span></span><br><span class="line">          <span class="attr">android:versionName</span>=<span class="string">"string"</span></span><br><span class="line">          <span class="attr">android:installLocation</span>=<span class="string">[</span>"<span class="attr">auto</span>" | "<span class="attr">internalOnly</span>" | "<span class="attr">preferExternal</span>"] &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>xmlns:android</li>
</ul>
<p>定义android命名空间，一般为<a href="http://schemas.android.com/apk/res/android，这样使得Android中各种标准属性能在文件中使用，提供了大部分元素中的数据。" target="_blank" rel="external">http://schemas.android.com/apk/res/android，这样使得Android中各种标准属性能在文件中使用，提供了大部分元素中的数据。</a></p>
<ul>
<li>package</li>
</ul>
<p>指定本应用内java主程序包的包名，它也是一个应用进程的默认名称</p>
<ul>
<li>sharedUserId</li>
</ul>
<p>表明数据权限，因为默认情况下，Android给每个APK分配一个唯一的UserID，所以是默认禁止不同APK访问共享数据的。若要共享数据，第一可以采用Share Preference方法，第二种就可以采用sharedUserId了，将不同APK的sharedUserId都设为一样，则这些APK之间就可以互相共享数据了。详见：<a href="http://wallage.blog.163.com/blog/static/17389624201011010539408/" target="_blank" rel="external">http://wallage.blog.163.com/blog/static/17389624201011010539408/</a></p>
<ul>
<li>sharedUserLabel</li>
</ul>
<p>一个共享的用户名，它只有在设置了sharedUserId属性的前提下才会有意义</p>
<ul>
<li>versionCode</li>
</ul>
<p>是给<strong>设备</strong>程序识别版本(升级)用的必须是一个interger值代表app更新过多少次，比如第一版一般为1，之后若要更新版本就设置为2，3等等。</p>
<ul>
<li>versionName</li>
</ul>
<p>这个名称是给<strong>用户</strong>看的，你可以将你的APP版本号设置为1.1版，后续更新版本设置为1.2、2.0版本等等。</p>
<ul>
<li>installLocation</li>
</ul>
<p>安装参数，是Android2.2中的一个新特性，installLocation有三个值可以选择：internalOnly、auto、preferExternal</p>
<p>选择<strong>preferExternal</strong>,系统会优先考虑将APK安装到SD卡上(当然最终用户可以选择为内部ROM存储上，如果SD存储已满，也会安装到内部存储上)</p>
<p>选择<strong>auto</strong>，系统将会根据存储空间自己去适应</p>
<p>选择<strong>internalOnly</strong>是指必须安装到内部才能运行</p>
<p><strong>注：需要进行后台类监控的APP最好安装在内部，而一些较大的游戏APP最好安装在SD卡上。现默认为安装在内部，如果把APP安装在SD卡上，首先得设置你的level为8，并且要配置android:installLocation这个参数的属性为preferExternal</strong></p>
<h3 id="2、第二层-Application属性"><a href="#2、第二层-Application属性" class="headerlink" title="2、第二层:Application属性"></a>2、第二层:Application属性</h3><p>一个AndroidManifest.xml中必须含有一个Application标签，这个标签声明了每一个应用程序的组件及其属性(如icon,label,permission等)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>  <span class="attr">android:allowClearUserData</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:allowTaskReparenting</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:backupAgent</span>=<span class="string">"string"</span></span><br><span class="line">             <span class="attr">android:debuggable</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:description</span>=<span class="string">"string resource"</span></span><br><span class="line">             <span class="attr">android:enabled</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:hasCode</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:icon</span>=<span class="string">"drawable resource"</span></span><br><span class="line">             <span class="attr">android:killAfterRestore</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:label</span>=<span class="string">"string resource"</span></span><br><span class="line">             <span class="attr">android:manageSpaceActivity</span>=<span class="string">"string"</span></span><br><span class="line">             <span class="attr">android:name</span>=<span class="string">"string"</span></span><br><span class="line">             <span class="attr">android:permission</span>=<span class="string">"string"</span></span><br><span class="line">             <span class="attr">android:persistent</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:process</span>=<span class="string">"string"</span></span><br><span class="line">             <span class="attr">android:restoreAnyVersion</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">             <span class="attr">android:taskAffinity</span>=<span class="string">"string"</span></span><br><span class="line">             <span class="attr">android:theme</span>=<span class="string">"resource or theme"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>android:allowClearUserData(‘true’ or ‘false’)</li>
</ul>
<p>用户是否能选择自行清除数据，<strong>默认为true</strong>，程序管理器包含一个选择允许用户清除数据。当为true时，用户可自己清理用户数据，反之亦然</p>
<ul>
<li>android:allowTaskReparenting(‘true’ or ‘false’)</li>
</ul>
<p>是否允许activity更换从属的任务，比如从短信息任务切换到浏览器任务</p>
<ul>
<li>android:backupAgent</li>
</ul>
<p>这也是Android2.2中的一个新特性，设置该APP的备份，属性值应该是一个完整的类名，如com.project.TestCase，此属性并没有默认值，并且类名必须得指定(就是个备份工具，将数据备份到云端的操作)</p>
<ul>
<li>android:debuggable</li>
</ul>
<p>这个从字面上就可以看出是什么作用的，当设置为true时，表明该APP在手机上可以被调试。<strong>默认为false</strong>,在false的情况下调试该APP，就会报以下错误：</p>
<p><em>Device XXX requires that applications explicitely declare themselves as debuggable in their manifest.</em></p>
<p> <em>Application XXX does not have the attribute ‘debuggable’ set to TRUE in its manifest and cannot be debugged.</em></p>
<ul>
<li>android:description/android:label</li>
</ul>
<p>此两个属性都是为许可提供的，均为字符串资源，当用户去看许可列表(android:label)或者某个许可的详细信息(android:description)时，这些字符串资源就可以显示给用户。label应当尽量简短，之需要告知用户该许可是在保护什么功能就行。而description可以用于具体描述获取该许可的程序可以做哪些事情，实际上让用户可以知道如果他们同意程序获取该权限的话，该程序可以做什么。我们通常用两句话来描述许可，第一句描述该许可，第二句警告用户如果批准该权限会可能有什么不好的事情发生</p>
<ul>
<li>android:enabled</li>
</ul>
<p>Android系统是否能够实例化该应用程序的组件，如果为true，每个组件的enabled属性决定那个组件是否可以被 enabled。如果为false，它覆盖组件指定的值；所有组件都是disabled。</p>
<ul>
<li>android:hasCode(‘true’ or ‘false’)</li>
</ul>
<p>表示此APP是否包含任何的代码，<strong>默认为true</strong>，若为false，则系统在运行组件时，不会去尝试加载任何的APP代码</p>
<p>一个应用程序自身不会含有任何的代码，除非内置组件类，比如Activity类，此类使用了AliasActivity类，当然这是个罕见的现象</p>
<p>(在Android2.3可以用标准C来开发应用程序，可在androidManifest.xml中将此属性设置为false,因为这个APP本身已经不含有任何的JAVA代码了)</p>
<ul>
<li>android:icon</li>
</ul>
<p>整个APP的图标，图片一般都放在drawable文件夹下。</p>
<ul>
<li>android:killAfterRestore</li>
</ul>
<p>在执行全系统的恢复操作时，配置恢复后相关的应用程序是否要被终止。 单个包的恢复操作不会导致程序被关闭。 全系统的恢复操作一般只会发生一次，即第一次配置手机时。 第三方应用程序通常不需要用到本属性。<br>默认值是“true”，表示全系统恢复过程中，应用程序在处理完数据后将被关闭。</p>
<ul>
<li>android:manageSpaceActivity</li>
</ul>
<p>指定某个 Activity 子类的完全限定名称，系统可以启动此 Activity 来让用户管理应用程序占用的内存空间。 这个 Activity 必须已用<figure class="highlight plain"><figcaption><span>activity > ```元素进行了声明。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* android:name</span><br><span class="line"></span><br><span class="line">为应用程序所实现的Application子类的全名。当应用程序进程开始时，该类在所有应用程序组件之前被实例化。</span><br><span class="line"></span><br><span class="line">若该类(比方androidMain类)是在声明的package下，则可以直接声明android:name=&quot;androidMain&quot;,但此类是在package下面的子包的话，就必须声明为全路径或android:name=&quot;package名称.子包名成.androidMain&quot;</span><br><span class="line"></span><br><span class="line">* android:permission</span><br><span class="line"></span><br><span class="line">设置许可名，这个属性若在```&lt;application&gt;```上定义的话，是一个给应用程序的所有组件设置许可的便捷方式，当然它是被各组件设置的许可名所覆盖的</span><br><span class="line"></span><br><span class="line">* android:presistent</span><br><span class="line"></span><br><span class="line">该应用程序是否应该在任何时候都保持运行状态,默认为false。因为应用程序通常不应该设置本标识，持续模式仅仅应该设置给某些系统应用程序才是有意义的。</span><br><span class="line"></span><br><span class="line">* android:process</span><br><span class="line"></span><br><span class="line">应用程序运行的进程名，它的默认值为```&lt;manifest&gt;```元素里设置的包名，当然每个组件都可以通过设置该属性来覆盖默认值。如果你想两个应用程序共用一个进程的话，你可以设置他们的android:process相同，但前提条件是他们共享一个用户ID及被赋予了相同证书的时候</span><br><span class="line"></span><br><span class="line">* android:restoreAnyVersion</span><br><span class="line"></span><br><span class="line">同样也是android2.2的一个新特性，用来表明应用是否准备尝试恢复所有的备份，甚至该备份是比当前设备上更要新的版本，默认是false</span><br><span class="line"></span><br><span class="line">* android:taskAffinity</span><br><span class="line"></span><br><span class="line">拥有相同的affinity的Activity理论上属于相同的Task，应用程序默认的affinity的名字是&lt;manifest&gt;元素中设定的package名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* android:theme</span><br><span class="line"></span><br><span class="line">是一个资源的风格，它定义了一个默认的主题风格给所有的activity,当然也可以在自己的theme里面去设置它，有点类似style。</span><br><span class="line"></span><br><span class="line">### 3、第三层:Activity属性</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line"></span><br><span class="line">        &lt;activity android:allowTaskReparenting=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:alwaysRetainTaskState=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:clearTaskOnLaunch=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:configChanges=[&quot;mcc&quot;, &quot;mnc&quot;, &quot;locale&quot;,</span><br><span class="line">                                         &quot;touchscreen&quot;, &quot;keyboard&quot;, &quot;keyboardHidden&quot;,</span><br><span class="line">                                         &quot;navigation&quot;, &quot;orientation&quot;, &quot;screenLayout&quot;,</span><br><span class="line">                                         &quot;fontScale&quot;, &quot;uiMode&quot;]</span><br><span class="line">                  android:enabled=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:excludeFromRecents=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:exported=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:finishOnTaskLaunch=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:icon=&quot;drawable resource&quot;</span><br><span class="line">                  android:label=&quot;string resource&quot;</span><br><span class="line">                  android:launchMode=[&quot;multiple&quot; | &quot;singleTop&quot; |</span><br><span class="line">                                      &quot;singleTask&quot; | &quot;singleInstance&quot;]</span><br><span class="line">                  android:multiprocess=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:name=&quot;string&quot;</span><br><span class="line">                  android:noHistory=[&quot;true&quot; | &quot;false&quot;]  </span><br><span class="line">                  android:permission=&quot;string&quot;</span><br><span class="line">                  android:process=&quot;string&quot;</span><br><span class="line">                  android:screenOrientation=[&quot;unspecified&quot; | &quot;user&quot; | &quot;behind&quot; |</span><br><span class="line">                                             &quot;landscape&quot; | &quot;portrait&quot; |</span><br><span class="line">                                             &quot;sensor&quot; | &quot;nosensor&quot;]</span><br><span class="line">                  android:stateNotNeeded=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:taskAffinity=&quot;string&quot;</span><br><span class="line">                  android:theme=&quot;resource or theme&quot;</span><br><span class="line">                  android:windowSoftInputMode=[&quot;stateUnspecified&quot;,</span><br><span class="line">                                               &quot;stateUnchanged&quot;, &quot;stateHidden&quot;,</span><br><span class="line">                                               &quot;stateAlwaysHidden&quot;, &quot;stateVisible&quot;,</span><br><span class="line">                                               &quot;stateAlwaysVisible&quot;, &quot;adjustUnspecified&quot;,</span><br><span class="line">                                               &quot;adjustResize&quot;, &quot;adjustPan&quot;] &gt;   </span><br><span class="line">    </span><br><span class="line">    &lt;/activity&gt;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>android:alwaysRetainTaskState</li>
</ul>
<p><strong>是否保留状态不变</strong>， 比如切换回home, 再从新打开，activity处于最后的状态。比如一个浏览器拥有很多状态(当打开了多个TAB的时候)，用户并不希望丢失这些状态时，此时可将此属性设置为true</p>
<ul>
<li><p>android:clearTaskOnLaunch<br>比如 P 是 activity, Q 是被P 触发的 activity, 然后返回Home, 重新启动 P，是否显示 Q</p>
</li>
<li><p>android:configChanges</p>
</li>
</ul>
<p>当配置list发生修改时， 是否调用 onConfigurationChanged() 方法  比如 “locale|navigation|orientation”.<br>这个我用过,主要用来看手机方向改变的. android手机在旋转后,layout会重新布局, 如何做到呢?<br>正常情况下. 如果手机旋转了.当前Activity后杀掉,然后根据方向重新加载这个Activity. 就会从onCreate开始重新加载.<br>如果你设置了 这个选项, 当手机旋转后,当前Activity之后调用onConfigurationChanged() 方法. 而不跑onCreate方法等.</p>
<ul>
<li>android:excludeFromRecents</li>
</ul>
<p>是否可被显示在最近打开的activity列表里，默认是false</p>
<ul>
<li>android:finishOnTaskLaunch</li>
</ul>
<p>当用户重新启动这个任务的时候，是否关闭已打开的activity，默认是false</p>
<p><strong>如果这个属性和allowTaskReparenting都是true,这个属性就是王牌。Activity的亲和力将被忽略。该Activity已经被摧毁并非re-parented</strong></p>
<ul>
<li>android:launchMode(Activity加载模式)</li>
</ul>
<p>在多Activity开发中，有可能是自己应用之间的Activity跳转，或者夹带其他应用的可复用Activity。可能会希望跳转到原来某个Activity实例，而不是产生大量重复的Activity。这需要为Activity配置特定的加载模式，而不是使用默认的加载模式</p>
<p>Activity有四种加载模式：</p>
<p><strong>standard</strong>、<strong>singleTop</strong>、<strong>singleTask</strong>、<strong>singleInstance</strong>(其中前两个是一组、后两个是一组)，默认为standard </p>
<ol>
<li><p>standard：就是intent将发送给新的实例，所以每次跳转都会生成新的activity。</p>
</li>
<li><p>singleTop：也是发送新的实例，但不同standard的一点是，在请求的Activity正好位于栈顶时(配置成singleTop的Activity)，不会构造新的实例</p>
</li>
<li><p>singleTask：和后面的singleInstance都只创建一个实例，当intent到来，需要创建设置为singleTask的Activity的时候，系统会检查栈里面是否已经有该Activity的实例。如果有直接将intent发送给它。</p>
</li>
<li><p>singleInstance：首先说明一下task这个概念，Task可以认为是一个栈，可放入多个Activity。比如启动一个应用，那么Android就创建了一个Task，然后启动这个应用的入口Activity，那在它的界面上调用其他的Activity也只是在这个task里面。那如果在多个task中共享一个Activity的话怎么办呢。举个例来说，如果开启一个导游服务类的应用程序，里面有个Activity是开启GOOGLE地图的，当按下home键退回到主菜单又启动GOOGLE地图的应用时，显示的就是刚才的地图，实际上是同一个Activity，实际上这就引入了singleInstance。singleInstance模式就是将该Activity单独放入一个栈中，这样这个栈中只有这一个Activity，不同应用的intent都由这个Activity接收和展示，这样就做到了共享。当然前提是这些应用都没有被销毁，所以刚才是按下的HOME键，如果按下了返回键，则无效</p>
</li>
</ol>
<ul>
<li>android:multiprocess</li>
</ul>
<p>是否允许多进程，默认是false</p>
<ul>
<li>android:noHistory</li>
</ul>
<p>当用户从Activity上离开并且它在屏幕上不再可见时，Activity是否从Activity stack中清除并结束。默认是false。Activity不会留下历史痕迹</p>
<ul>
<li>android:screenOrientation</li>
</ul>
<p>activity显示的模式</p>
<p>默认为unspecified：由系统自动判断显示方向</p>
<p>landscape横屏模式，宽度比高度大</p>
<p>portrait竖屏模式, 高度比宽度大</p>
<p>user模式，用户当前首选的方向</p>
<p>behind模式：和该Activity下面的那个Activity的方向一致(在Activity堆栈中的)</p>
<p>sensor模式：有物理的感应器来决定。如果用户旋转设备这屏幕会横竖屏切换</p>
<p>nosensor模式：忽略物理感应器，这样就不会随着用户旋转设备而更改了</p>
<ul>
<li>android:stateNotNeeded</li>
</ul>
<p>activity被销毁或者成功重启时是否保存状态</p>
<ul>
<li>android:windowSoftInputMode</li>
</ul>
<p>activity主窗口与软键盘的交互模式，可以用来避免输入法面板遮挡问题，Android1.5后的一个新特性。</p>
<p>这个属性能影响两件事情：</p>
<p>【A】当有焦点产生时，软键盘是隐藏还是显示</p>
<p>【B】是否减少活动主窗口大小以便腾出空间放软键盘</p>
<p>各值的含义：</p>
<p>【A】stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置</p>
<p>【B】stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示</p>
<p>【C】stateHidden：用户选择activity时，软键盘总是被隐藏</p>
<p>【D】stateAlwaysHidden：当该Activity主窗口获取焦点时，软键盘也总是被隐藏的</p>
<p>【E】stateVisible：软键盘通常是可见的</p>
<p>【F】stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态</p>
<p>【G】adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示</p>
<p>【H】adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间</p>
<p>【I】adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分</p>
<h3 id="4、第四层intent-filter"><a href="#4、第四层intent-filter" class="headerlink" title="4、第四层intent-filter"></a>4、第四层intent-filter</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>  <span class="attr">android:icon</span>=<span class="string">"drawable resource"</span></span><br><span class="line">               <span class="attr">android:label</span>=<span class="string">"string resource"</span></span><br><span class="line">               <span class="attr">android:priority</span>=<span class="string">"integer"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">data</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>intent-filter属性</p>
<p>android:priority(解释：有序广播主要是按照声明的优先级别，如A的级别高于B，那么，广播先传给A，再传给B。优先级别就是用设置priority属性来确定，范围是从-1000～1000，<strong>数越大优先级别越高</strong>)</p>
<p>Intent filter内会设定的资料包括action,data与category三种。也就是说filter只会与intent里的这三种资料作对比动作</p>
<p>action属性</p>
<p>action很简单，只有android:name这个属性。常见的android:name值为android.intent.action.MAIN，表明此activity是作为应用程序的入口。</p>
<p>category属性</p>
<p>category也只有android:name属性。常见的android:name值为android.intent.category.LAUNCHER(决定应用程序是否显示在程序列表里)</p>
<p>data属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>  <span class="attr">android:host</span>=<span class="string">"string"</span></span><br><span class="line">      <span class="attr">android:mimeType</span>=<span class="string">"string"</span></span><br><span class="line">      <span class="attr">android:path</span>=<span class="string">"string"</span></span><br><span class="line">      <span class="attr">android:pathPattern</span>=<span class="string">"string"</span></span><br><span class="line">      <span class="attr">android:pathPrefix</span>=<span class="string">"string"</span></span><br><span class="line">      <span class="attr">android:port</span>=<span class="string">"string"</span></span><br><span class="line">      <span class="attr">android:scheme</span>=<span class="string">"string"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>每个<data>元素指定一个URI和数据类型（MIME类型）。它有四个属性scheme、host、port、path对应于URI的每个部分：<br>scheme://host:port/path</data></li>
</ul>
<p>scheme的值一般为”http”，host为包名，port为端口号，path为具体地址。如：<a href="http://com.test.project:200/folder/etc" target="_blank" rel="external">http://com.test.project:200/folder/etc</a></p>
<p>其中host和port合起来构成URI的凭据(authority)，如果host没有指定，则port也会被忽略</p>
<p>要让authority有意义，scheme也必须要指定。要让path有意义，scheme+authority也必须要指定</p>
<ul>
<li><p>mimeType（指定数据类型），若mimeType为’Image’，则会从content Provider的指定地址中获取image类型的数据。还有’video’啥的，若设置为video/mp4，则表示在指定地址中获取mp4格式的video文件</p>
</li>
<li><p>而pathPattern和PathPrefix主要是为了格式化path所使用的</p>
</li>
</ul>
<p>5、第四层meta-data</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"string"</span></span><br><span class="line">           <span class="attr">android:resource</span>=<span class="string">"resource specification"</span></span><br><span class="line">           <span class="attr">android:value</span>=<span class="string">"string"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是该元素的基本结构.可以包含在<activity> <activity-alias> <service> <receiver>四个元素中。</receiver></service></activity-alias></activity></p>
<p>android:name（解释：元数据项的名字，为了保证这个名字是唯一的，采用java风格的命名规范，如com.woody.project.fried)</p>
<p>android:resource(解释：资源的一个引用，指定给这个项的值是该资源的id。该id可以通过方法Bundle.getInt()来从meta-data中找到。)</p>
<p>android:value(解释：指定给这一项的值。可以作为值来指定的数据类型并且组件用来找回那些值的Bundle方法：[getString],[getInt],[getFloat],[getString],[getBoolean])</p>
<p>6、第三层<activity-alias>属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:enabled</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">                <span class="attr">android:exported</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">                <span class="attr">android:icon</span>=<span class="string">"drawable resource"</span></span><br><span class="line">                <span class="attr">android:label</span>=<span class="string">"string resource"</span></span><br><span class="line">                <span class="attr">android:name</span>=<span class="string">"string"</span></span><br><span class="line">                <span class="attr">android:permission</span>=<span class="string">"string"</span></span><br><span class="line">                <span class="attr">android:targetActivity</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure></activity-alias></p>
<p><activity-alias>是为activity创建快捷方式的，如下实例：</activity-alias></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".shortcut"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">".CreateShortcuts"</span> <span class="attr">android:targetActivity</span>=<span class="string">".shortcut"</span> <span class="attr">android:label</span>=<span class="string">"@string/shortcut"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.CREATE_SHORTCUT"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中android.targetActivity是指向对应快捷方式的activity,如上述的shortcut(此Activity名)</p>
<p>android:label是指快捷方式的名称，而快捷方式的图标默认是给定的application图标</p>
<p>7、第三层 service</p>
<p>【1】service与activity同级，与activity不同的是，它不能自己启动的，运行在后台的程序，如果我们退出应用时，Service进程并没有结束，它仍然在后台运行。比如听音乐，网络下载数据等，都是由service运行的</p>
<p>【2】service生命周期：Service只继承了onCreate(),onStart(),onDestroy()三个方法，第一次启动Service时，先后调用了onCreate(),onStart()这两个方法，当停止Service时，则执行onDestroy()方法，如果Service已经启动了，当我们再次启动Service时，不会在执行onCreate()方法，而是直接执行onStart()方法</p>
<p>【3】service与activity间的通信</p>
<p>Service后端的数据最终还是要呈现在前端Activity之上的，因为启动Service时，系统会重新开启一个新的进程，这就涉及到不同进程间通信的问题了(AIDL)，Activity与service间的通信主要用IBinder负责。<br>【4】</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:enabled</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line"></span><br><span class="line">         <span class="attr">android:exported</span>[=<span class="string">"true"</span> | "<span class="attr">false</span>"]</span><br><span class="line"></span><br><span class="line">         <span class="attr">android:icon</span>=<span class="string">"drawable resource"</span></span><br><span class="line"></span><br><span class="line">         <span class="attr">android:label</span>=<span class="string">"string resource"</span></span><br><span class="line"></span><br><span class="line">         <span class="attr">android:name</span>=<span class="string">"string"</span></span><br><span class="line"></span><br><span class="line">         <span class="attr">android:permission</span>=<span class="string">"string"</span></span><br><span class="line"></span><br><span class="line">         <span class="attr">android:process</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>service标签内的属性之前已有描述，在此不重复了～</p>
<p>8、第三层<receiver></receiver></p>
<p>receiver的属性与service一样，这里就不显示了</p>
<p>BroadcastReceiver：用于发送广播，broadcast是在应用程序之间传输信息的一种机制，而BroadcastReceiver是对发送出来的 Broadcast进行过滤接受并响应的一类组件。<br>9、第三层<provider>属性</provider></p>
<provider android:authorities="list" android:enabled="["true"" |="" "false"]="" android:exported="["true"" android:granturipermissions="["true"" android:icon="drawable resource" android:initorder="integer" android:label="string resource" android:multiprocess="["true"" android:name="string" android:permission="string" android:process="string" android:readpermission="string" android:syncable="["true"" android:writepermission="string"><br><br>           <grant-uri-permission><br><br>           <meta-data><br><br></meta-data></grant-uri-permission></provider>

<p>contentProvider(数据存储)</p>
<p>【1】android:authorities：</p>
<p>标识这个ContentProvider，调用者可以根据这个标识来找到它</p>
<p>【2】android:grantUriPermission：</p>
<p>对某个URI授予的权限</p>
<p>【3】android:initOrder</p>
<p>10、第三层<uses-library></uses-library></p>
<p>用户库，可自定义。所有android的包都可以引用</p>
<p>11、第一层<supports-screens></supports-screens></p>
<supports-screens android:smallscreens="["true"" |="" "false"]="" android:normalscreens="["true"" android:largescreens="["true"" android:anydensity="["true"">

<p>这是在android1.6以后的新特性，支持多屏幕机制</p>
<p>各属性含义：这四个属性，是否支持大屏，是否支持中屏，是否支持小屏，是否支持多种不同密度</p>
<p>12、第二层 uses-configuration 与uses-feature性能都差不多</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-configuration</span>  <span class="attr">android:reqFiveWayNav</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] </span><br><span class="line">                    <span class="attr">android:reqHardKeyboard</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">                    <span class="attr">android:reqKeyboardType</span>=<span class="string">[</span>"<span class="attr">undefined</span>" | "<span class="attr">nokeys</span>" | "<span class="attr">qwerty</span>" |   "<span class="attr">twelvekey</span>"]</span><br><span class="line">                    <span class="attr">android:reqNavigation</span>=<span class="string">[</span>"<span class="attr">undefined</span>" | "<span class="attr">nonav</span>" | "<span class="attr">dpad</span>" |  "<span class="attr">trackball</span>" | "<span class="attr">wheel</span>"]</span><br><span class="line">                    <span class="attr">android:reqTouchScreen</span>=<span class="string">[</span>"<span class="attr">undefined</span>" | "<span class="attr">notouch</span>" | "<span class="attr">stylus</span>" | "<span class="attr">finger</span>"] /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:glEsVersion</span>=<span class="string">"integer"</span></span><br><span class="line">              <span class="attr">android:name</span>=<span class="string">"string"</span></span><br><span class="line">              <span class="attr">android:required</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"] /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这两者都是在描述应用所需要的硬件和软件特性，以便防止应用在没有这些特性的设备上安装。</p>
<p>13、第二层uses-sdk<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"integer"</span></span><br><span class="line">          <span class="attr">android:targetSdkVersion</span>=<span class="string">"integer"</span></span><br><span class="line">          <span class="attr">android:maxSdkVersion</span>=<span class="string">"integer"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>描述应用所需的api level，就是版本，目前是android 2.2 = 8，android2.1 = 7，android1.6 = 4，android1.5=3</p>
<p>在此属性中可以指定支持的最小版本，目标版本以及最大版本</p>
<p>14、第二层instrumentation<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">instrumentation</span> <span class="attr">android:functionalTest</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">                 <span class="attr">android:handleProfiling</span>=<span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]</span><br><span class="line">                 <span class="attr">android:icon</span>=<span class="string">"drawable resource"</span></span><br><span class="line">                 <span class="attr">android:label</span>=<span class="string">"string resource"</span></span><br><span class="line">                 <span class="attr">android:name</span>=<span class="string">"string"</span></span><br><span class="line">                 <span class="attr">android:targetPackage</span>=<span class="string">"string"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 定义一些用于探测和分析应用性能等等相关的类，可以监控程序。在各个应用程序的组件之前instrumentation类被实例化</p>
<p>android:functionalTest(解释：instrumentation类是否能运行一个功能测试，默认为false)</p>
<p>15、<em>permission</em>、<em>uses-permission</em>、<em>permission-tree</em> 、<em>permission-group</em> 区别～</p>
<p>最常用的当属<uses-permission>，当我们需要获取某个权限的时候就必须在我们的manifest文件中声明，此<uses-permission>与<application>同级，具体权限列表请看此处</application></uses-permission></uses-permission></p>
<p>通常情况下我们不需要为自己的应用程序声明某个权限，除非你提供了供其他应用程序调用的代码或者数据。这个时候你才需要使用<permission> 这个标签。很显然这个标签可以让我们声明自己的权限。比如：</permission></p>
<permission android:name="com.teleca.project.MY_SECURITY" .="">

<p>那么在activity中就可以声明该自定义权限了，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">.</span> <span class="attr">.</span> <span class="attr">.</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"XXX"</span> <span class="attr">.</span> <span class="attr">.</span> <span class="attr">.</span> &gt;</span></span><br><span class="line"></span><br><span class="line">                  android:permission="com.teleca.project.MY_SECURITY"&gt; <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然自己声明的permission也不能随意的使用，还是需要使用<uses-permission>来声明你需要该权限</uses-permission></p>
<p><permission-group> 就是声明一个标签，该标签代表了一组permissions，而<permission-tree>是为一组permissions声明了一个namespace。这两个标签可以看之前的系列文章。</permission-tree></permission-group></p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
</permission></supports-screens>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何提高Android虚拟机的运行速度]]></title>
      <url>http://yoursite.com/2016/07/17/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98Android%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="关于Android-virtual-Device"><a href="#关于Android-virtual-Device" class="headerlink" title="关于Android virtual Device"></a>关于Android virtual Device</h1><p>Android virtual Device（AVD）是Google推出的可以在x86,x64,AMD设备上运行的虚拟机。我们可以在Android Studio中创建并且使用。</p>
<p><img src="" alt="AVD Manager"></p>
<p>在我们一般创建时，都再用默认的设置，这样会导致AVD使用时很卡，卡到爆……</p>
<p>下面我们就来一起设置，使它流畅的运行起来。</p>
<h1 id="下载安装Intel-HAXM"><a href="#下载安装Intel-HAXM" class="headerlink" title="下载安装Intel HAXM"></a>下载安装Intel HAXM</h1><ol>
<li><p>打开SDK Manger，在SDK Tools目录下，选择并下载Intel HAXM。</p>
<p><img src="leanote://file/getImage?fileId=5782246bc2c9522ae1000001" alt="Inter HAXM"></p>
</li>
<li><p>下载好并不代表安装，我们需要打卡SDK目录进行安装。</p>
</li>
</ol>
<blockquote>
<p>…\extras\intel\Hardware_Accelerated_Execution_Manager\intelhaxm-android.exe</p>
</blockquote>
<p>安装只需要next就好。也可以适当的分配一点大的内存。</p>
<ol>
<li>重启你的电脑。</li>
</ol>
<h1 id="添加AVD"><a href="#添加AVD" class="headerlink" title="添加AVD"></a>添加AVD</h1><p>我们打开AVD Manager。行创建一个AVD</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/68978086.jpg" alt=""></p>
<p>行创建一个AVD</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/27837587.jpg" alt=""></p>
<p>选择一个你喜欢的机型，我在这里选择6P。</p>
<p><img src="leanote://file/getImage?fileId=578226dbc2c9522ae1000004" alt=""></p>
<p>按照你的电脑选择API和ABI</p>
<p><img src="leanote://file/getImage?fileId=57822739c2c9522ae1000005" alt=""></p>
<p>Next-&gt;Finish</p>
<p>此时我们就添加好一个虚拟机了。</p>
<h2 id="运行并修改参数"><a href="#运行并修改参数" class="headerlink" title="运行并修改参数"></a>运行并修改参数</h2><p>我们点击运行<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/59566680.jpg" alt=""></p>
<p>此时我们需要观察Android Studio的输出日志。其中有一条值得我们注意</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-17/65640645.jpg" alt=""></p>
<p>这一条警告提示我们VM heap低于最低值384M，要求我们去设置为384M。</p>
<p>此时我们打开编辑，修改VM heap为他所要求的值，我们的AVD就可以流畅的运行了。</p>
<p><strong>基于Android　Studio 2.1，Intel X64 RAM 8G</strong></p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity启动的两种方式]]></title>
      <url>http://yoursite.com/2016/07/04/Activity%E5%90%AF%E5%8A%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>今天学习Android的Intent的使用</p>
<h2 id="显示使用"><a href="#显示使用" class="headerlink" title="显示使用"></a>显示使用</h2><p>显示Intent就是指定Activity。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, MyAty.class));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过Intent直接指定一个Activity</p>
<h2 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h2><p>创建一个Intent，但是并不指定启动的Activiy，有很多启动方式。</p>
<h3 id="配置AndroidManiFest-xml中的activity"><a href="#配置AndroidManiFest-xml中的activity" class="headerlink" title="配置AndroidManiFest.xml中的activity"></a>配置AndroidManiFest.xml中的activity</h3><blockquote>
<p>AndroidManiFest.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">package</span>=<span class="string">"com.example.myapplication"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span><br><span class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span><br><span class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span><br><span class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyAty"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"asdasd"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在AndroidManiFest.xml中配置文件，添加intent-filter标签，并添加一个字符串。</p>
<blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//直接通过字符串启动</span></span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(<span class="string">"asdasd"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>注意</strong><br><strong>这里的字符串虽然可以说是任意格式，但是有一个约定俗成的规定</strong><br><strong>包名.intent.action.Action名</strong></p>
<hr>
<p>所以上述的<em>asdasd</em>我们应该命名为<em>com.example.myapplication.intent.activity.MyAty</em><br>为了方便，我们不出错。<br>我们会在代码的前面的添加一个静态常量。</p>
<blockquote>
<p>MyAty.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.PersistableBundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAty</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION = <span class="string">"com.example.myapplication.intent.activity.MyAty"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState, PersistableBundle persistentState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState, persistentState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_my_aty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MyAty.ACTION));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就很方便的使用，让我们不出错。</p>
<p>优势：<br>可以启动其他应用的页面，如在A应用中启动B应用中的某个Actio。<br>Demo</p>
<p>新建一个Module。</p>
<blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.app1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.btnStartMyaty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过字符串直接启动另一个app的页面。</span></span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(<span class="string">"com.example.myapplication.intent.activity.MyAty"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Intent过滤器"><a href="#Intent过滤器" class="headerlink" title="Intent过滤器"></a>Intent过滤器</h2><p>多个Activity拥有同一个Intent Action<br>新建Activity命名为MyAct1<br>之后的代码一样</p>
<blockquote>
<p>AndroidManiFest.xml</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"</span><br><span class="line">    package="com.example.myapplication"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup="true"</span><br><span class="line">        android:icon="@mipmap/ic_launcher"</span><br><span class="line">        android:label="@string/app_name"</span><br><span class="line">        android:supportsRtl="true"</span><br><span class="line">        android:theme="@style/AppTheme"&gt;</span><br><span class="line">        &lt;activity android:name=".MainActivity"&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name="android.intent.action.MAIN" /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">        &lt;activity android:name=".MyAty"</span><br><span class="line">            android:label="MyAty"&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;category android:name="android.intent.category.DEFAULT" /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;action android:name="com.example.myapplication.intent.activity.MyAty" /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">        &lt;activity android:name=".MyAty1"</span><br><span class="line">            android:label="@string/title_activity_my_aty1"&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;category android:name="android.intent.category.DEFAULT"&gt;&lt;/category&gt;</span><br><span class="line">                &lt;action android:name="com.example.myapplication.intent.activity.MyAty"&gt;&lt;/action&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>
<p>此时我们在运行启动。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/16-7-4/10084251.jpg" alt=""></p>
<p>会弹出提示，让我们选择启动哪一个Activity。</p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合遍历]]></title>
      <url>http://yoursite.com/2016/05/23/Java%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<h1 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h1><h2 id="使用Iterator"><a href="#使用Iterator" class="headerlink" title="使用Iterator"></a>使用Iterator</h2><p>Iterator主要用于遍历集合中的Collection元素，因此Iterator创建的对象是一个迭代器。</p>
<hr>
<h3 id="Iterator提供的四个方法"><a href="#Iterator提供的四个方法" class="headerlink" title="Iterator提供的四个方法"></a>Iterator提供的四个方法</h3><ul>
<li>boolean hasNext(): 如果迭代器的集合还没有被遍历完，返回ture。</li>
<li>Object next():返回集合里的下一个元素。</li>
<li>void remove():删除集合里上一次next方法返回的元素。</li>
<li>void forEachRemaining(Consumer action)：这个是java 8为Iterator新增的默认方法，该方法可使用Lambda表达式遍历所有的集合元素。</li>
</ul>
<hr>
<h3 id="next方法"><a href="#next方法" class="headerlink" title="next方法"></a>next方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by 晓辉 on 2016/5/23.</span><br><span class="line"> * 使用jdk8中的iterator遍历集合；</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteraorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List books=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        books.add(<span class="string">"fengk"</span>);</span><br><span class="line">        books.add(<span class="string">"niaho"</span>);</span><br><span class="line">        Iterator it=books.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            it.next();</span><br><span class="line">            <span class="keyword">if</span>(books.equals(<span class="string">"fengk"</span>))&#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; 输出结果</span><br><span class="line">&gt;niaho</span><br></pre></td></tr></table></figure>
<p>Iterator只用于遍历集合，本身本身并不具有承装对象的能力。如果需要就要创建Iterator对象，则必须有一个被迭代的集合。Iterator必须依附于Collection对象，若有一个Iterator对象，则必然有一个与之关联的Collection对象。</p>
<h2 id="使用Lambda表达式遍历Iterator"><a href="#使用Lambda表达式遍历Iterator" class="headerlink" title="使用Lambda表达式遍历Iterator"></a>使用Lambda表达式遍历Iterator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by 晓辉 on 2016/5/23.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个集合</span></span><br><span class="line">        Collection books=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        books.add(<span class="string">"java"</span>);</span><br><span class="line">        books.add(<span class="string">"c#"</span>);</span><br><span class="line">        Iterator it=books.iterator();</span><br><span class="line">        <span class="comment">// 使用Lambda表达式遍历所有的集合</span></span><br><span class="line">        it.forEachRemaining(obj-&gt;System.out.println(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果<br>c#<br>java</p>
</blockquote>
<p><strong>注意：</strong>这里的输出是倒序。</p>
<hr>
<p>##使用foreach遍历集合元素<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeachTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个集合</span></span><br><span class="line">        Collection books=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        books.add(<span class="string">"java"</span>);</span><br><span class="line">        books.add(<span class="string">"c#"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Object obj:books)&#123;</span><br><span class="line"><span class="comment">//            此处的books变量也不是集合的本身元素</span></span><br><span class="line">            String book=(String)obj;</span><br><span class="line">            System.out.println(book);</span><br><span class="line">            <span class="keyword">if</span> (book.equals(<span class="string">"java"</span>))&#123;</span><br><span class="line">                books.remove(book);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>for循环中的迭代变量也不是集合元素本身，系统只是以此把集合元素的值赋值给迭代变量，因此for循环中修改的迭代变量的值是也是没有任何意义。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for windows使用教程（三）]]></title>
      <url>http://yoursite.com/2016/05/15/GitHub-for-windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="团队协作流程"><a href="#团队协作流程" class="headerlink" title="团队协作流程"></a>团队协作流程</h1><h2 id="认识Flow"><a href="#认识Flow" class="headerlink" title="认识Flow"></a>认识Flow</h2><p><strong><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="external">GitHub Flow</a></strong>是一个轻量级的，基于分支的工作流程，支持团队和部署在那里的定期做项目。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/1.png" alt=""></p>
<h2 id="为团队成员写入权限"><a href="#为团队成员写入权限" class="headerlink" title="为团队成员写入权限"></a>为团队成员写入权限</h2><p>在我们的队友添加一个写的权限，这样我们的队友才能很好的修改代码。<br>我们打开网页上的<a href="http://www.github.com" target="_blank" rel="external">GitHub</a>,点击<strong>settings</strong>,</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/2.png" alt=""></p>
<p>之后我们找到<strong>collaborators</strong>，这里会让我们验证密码，之后就有添加合作者的选项。这样我们就能添加我们的小伙伴了！</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/3.png" alt=""></p>
<p>这样我们就添加了新的小伙伴，新的小伙伴有着同样的权限去修改和管理代码。<br>此时我们就会看到我的小伙伴wevan的github主页上就会出现关于我创建的First的各种通知。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/9.png" alt=""></p>
<h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>在我们创建一个叫<strong>add new function</strong>的分支。</p>
<p> 创建一个分支</p>
<blockquote>
<p><em>Create a branch</em></p>
</blockquote>
<p>当你工作的一个项目，你会在任何给定的时间有一堆不同的功能或正在进行的想法 - 其中一些是蓄势待发，而另一些则不是。分支的存在是为了帮助你管理这个工作流程。</p>
<blockquote>
<p><em>When you’re working on a project, you’re going to have a bunch of different features or ideas in progress at any given time – some of which are ready to go, and others which are not. Branching exists to help you manage this workflow.</em></p>
</blockquote>
<p>当您在项目中创建一个分支，你创造一个环境，在那里你可以尝试新的想法。你让一个分支的更改不会影响主分支，让你可以自由进行实验，并提交更改，在你的分支将不会被合并，直到它准备好知识安全的人所正在与合作进行审查。</p>
<blockquote>
<p><em>When you create a branch in your project, you’re creating an environment where you can try out new ideas. Changes you make on a branch don’t affect the master branch, so you’re free to experiment and commit changes, safe in the knowledge that your branch won’t be merged until it’s ready to be reviewed by someone you’re collaborating with.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>分支在Git中是一个核心概念，整个GitHub的流量是基于它。这里只有一个规则：在任何主分支总是部署。</p>
<blockquote>
<p><em>Branching is a core concept in Git, and the entire GitHub Flow is based upon it. There’s only one rule: anything in the master branch is always deployable.</em></p>
</blockquote>
<p>正因为如此，这是非常重要的一个功能或修复工作时，你的新分支关老爷的创建。您的分支名应该是描述（例如，重构的身份验证，用户的内容缓存键，使视网膜-化身），以便其他人可以看到正在处理。</p>
<blockquote>
<p><em>Because of this, it’s extremely important that your new branch is created off of master when working on a feature or a fix. Your branch name should be descriptive (e.g., refactor-authentication, user-content-cache-key, make-retina-avatars), so that others can see what is being worked on.</em><br><strong><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="external">来自GitHub Flow</a></strong></p>
</blockquote>
<h2 id="添加提交"><a href="#添加提交" class="headerlink" title="添加提交"></a>添加提交</h2><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/4.png" alt=""></p>
<p>我们首先把分支切换到新的分支上<strong>add new function</strong></p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/5.png" alt=""></p>
<p>修改新的版本</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/6.png" alt=""></p>
<p>填写好新的<strong>Summary</strong>和<strong>Description</strong>，提交新的版本并同步。<br>这样小伙伴登陆到<strong>GitHub</strong>上就看到了就可以清楚的看到一切的修改。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/7.png" alt=""></p>
<p>添加提交</p>
<blockquote>
<p><em>Add commits</em></p>
</blockquote>
<p> 一旦你的分支已经建立，现在是时候开始进行更改。无论何时添加，编辑或删除一个文件，你作出承诺，并将其添加到您的分支。提交加入这一过程保持你的进步轨迹，你在一个特性分支工作。</p>
<blockquote>
<p><em>Once your branch has been created, it’s time to start making changes. Whenever you add, edit, or delete a file, you’re making a commit, and adding them to your branch. This process of adding commits keeps track of your progress as you work on a feature branch.</em></p>
</blockquote>
<p>还承诺创建工作的透明历史，其他人可以按照理解你做了什么，以及为什么。每次提交都有一个关联的提交信息，这是解释为什么一个特定的变化作出了说明。此外，每次提交被认为是变革的一个独立单元。这使您可以回滚的变化，如果发现错误，或者如果你决定在一个不同的方向前进。</p>
<blockquote>
<p><em>Commits also create a transparent history of your work that others can follow to understand what you’ve done and why. Each commit has an associated commit message, which is a description explaining why a particular change was made. Furthermore, each commit is considered a separate unit of change. This lets you roll back changes if a bug is found, or if you decide to head in a different direction.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>提交信息是重要的，特别是因为Git跟踪更改，然后将它们显示为承诺一旦他们推到服务器。通过字迹清晰提交信息，你可以更容易为其他人跟着，并提供反馈。</p>
<blockquote>
<p><em>Commit messages are important, especially since Git tracks your changes and then displays them as commits once they’re pushed to the server. By writing clear commit messages, you can make it easier for other people to follow along and provide feedback.</em><br><strong><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="external">来自GitHub Flow</a></strong></p>
</blockquote>
<h2 id="打开一个pull请求"><a href="#打开一个pull请求" class="headerlink" title="打开一个pull请求"></a>打开一个pull请求</h2><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/8.png" alt=""><br>这个是整个流程中比较关键的一步，发布<strong>Pull Request</strong>。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/10.png" alt=""><br>点击客户端或者网页上的<strong>Pull Request</strong>发布。<br>我们这里点击<strong>Pull Request</strong><br><img src="http://7xt81u.com1.z0.glb.clouddn.com/11.png" alt="客户端/网页版"><br>我们填写好必要的说明性文字<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/12.png" alt=""><br>点击<strong>Send Pull Request</strong><br><img src="http://7xt81u.com1.z0.glb.clouddn.com/13.png" alt=""><br>他既然让我们到GitHub上看，我们就听他的，点击，进入。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/14.png" alt=""><br>我们发现小伙伴已经在下面留言了！</p>
<h3 id="讨论和审核你的代码"><a href="#讨论和审核你的代码" class="headerlink" title="讨论和审核你的代码"></a>讨论和审核你的代码</h3><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/15.png" alt=""><br>你的小伙伴开始对你的代码讨论，修改，迭代。</p>
<p>讨论和审查你的代码</p>
<blockquote>
<p><em>Discuss and review your code</em></p>
</blockquote>
<p>一旦拉入请求已被打开，人或团队审查您的变化可能有疑问或意见。也许编码风格不匹配项目的指导方针，改变缺少单元测试，或者也许一切看起来不错，道具都是为了。引入请求旨在鼓励并捕获这种类型的对话。</p>
<blockquote>
<p><em>Once a Pull Request has been opened, the person or team reviewing your changes may have questions or comments. Perhaps the coding style doesn’t match project guidelines, the change is missing unit tests, or maybe everything looks great and props are in order. Pull Requests are designed to encourage and capture this type of conversation.</em></p>
</blockquote>
<p>您还可以继续推送到你的分支在你提交的讨论和反馈光。如果有人评论说，你忘了做某件事，或者如果在代码中的错误，你可以在你的分支修复它，推高的变化。GitHub上会显示新的提交和其他任何意见，你可能会收到统一拉请求视图。</p>
<blockquote>
<p><em>You can also continue to push to your branch in light of discussion and feedback about your commits. If someone comments that you forgot to do something or if there is a bug in the code, you can fix it in your branch and push up the change. GitHub will show your new commits and any additional feedback you may receive in the unified Pull Request view.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>拉请求的意见都写在降价，所以你可以插入图片和表情符，使用预先格式化的文本块，等轻质格式。</p>
<blockquote>
<p><em>Pull Request comments are written in Markdown, so you can embed images and emoji, use pre-formatted text blocks, and other lightweight formatting.</em></p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/16.png" alt=""></p>
<p>部署</p>
<blockquote>
<p><em>Deploy</em></p>
</blockquote>
<p>一旦你拉的请求进行了审查和部门通过你的测试，您可以部署您的更改，以验证他们的生产。如果你的分支造成的问题，您可以通过部署现有的主投产回滚</p>
<blockquote>
<p><em>Once your pull request has been reviewed and the branch passes your tests, you can deploy your changes to verify them in production. If your branch causes issues, you can roll it back by deploying the existing master into production.</em></p>
</blockquote>
<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/17.png" alt=""><br>合并分支我们之前已经说过，这里就不再赘述。</p>
<p>合并</p>
<blockquote>
<p><em>Merge</em></p>
</blockquote>
<p>现在，您的更改在生产中得到了验证，现在是时候你的代码合并到主分支。</p>
<blockquote>
<p><em>Now that your changes have been verified in production, it is time to merge your code into the master branch.</em></p>
</blockquote>
<p>合并后，引入请求保护的历史变迁到您的代码记录。因为他们是搜索的，他们不让任何人回去的时间理解为什么以及如何决定了。</p>
<blockquote>
<p><em>Once merged, Pull Requests preserve a record of the historical changes to your code. Because they’re searchable, they let anyone go back in time to understand why and how a decision was made.</em></p>
</blockquote>
<p><strong>ProTip</strong></p>
<p>通过将某些关键字到您的拉请求的文本，你可以用代码相关联的问题。当你拉入请求合并，相关问题也将被关闭。例如，输入短语关闭＃32将关闭在仓库中发行数量32。欲了解更多信息，请查看我们的帮助文章。</p>
<blockquote>
<p><em>By incorporating certain keywords into the text of your Pull Request, you can associate issues with code. When your Pull Request is merged, the related issues are also closed. For example, entering the phrase Closes #32 would close issue number 32 in the repository. For more information, check out our help article.</em></p>
</blockquote>
<p><strong>注意：英文翻译为机器翻译，可能有翻译错误的地方，建议大家尽可能看英文</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本的GitHub教程就算写完了，已有如果在有就是一些GitHub上的一些使用小技巧了。</p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程(二)]]></title>
      <url>http://yoursite.com/2016/05/13/GitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h1 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>我们创建第一个分支取名为<strong>“new masterh”</strong>,点击<strong>Create new branch</strong>创建第一个分支。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF.png" alt=""></p>
<p>我们发现此时的分支已经切换到了我们刚刚创建的分支<strong>new masterch</strong></p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png" alt=""></p>
<p>我们来修改<strong>new masterch</strong>分支上的内容。<br>我们仍旧打开<strong>FirstDemo.txt</strong>进行编辑。输入以下内容</p>
<blockquote>
<p>创建的第一个分支。</p>
</blockquote>
<p>打开github进行，填写<strong>Summary</strong>和<strong>Description</strong></p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E4%BF%AE%E6%94%B9%E5%88%86%E6%94%AF%E5%86%85%E5%AE%B9.png" alt=""></p>
<p>之后我们点击<strong>Commit to new-master</strong><br>在<strong>History</strong>目录下，我们可以看到会有两条主线，分别是<strong>master</strong>和<strong>new-master</strong>并且在<strong>new-master</strong>的分支下又一个蓝色的<strong>实线空心圈</strong>和一个<strong>虚线空心圈</strong>。<br><strong>实线圈</strong>表示当前的节点，<strong>空心圈</strong>表示下一次修改时的节点。<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%8E%A8%E9%80%81%E5%88%86%E6%94%AF.png" alt=""><br><strong>红线</strong>标示的部分就是当前的分支<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%BA%A2%E7%BA%BF%E5%BC%BA%E8%B0%83.png" alt=""></p>
<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>点击<strong>红色</strong>划线部分就会出现分支的列表<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/5d9c09b750eec11d.png" alt=""><br>我们点击<strong>master</strong>就会切换到<strong>master</strong>分支。</p>
<h2 id="上传-同步分支"><a href="#上传-同步分支" class="headerlink" title="上传/同步分支"></a>上传/同步分支</h2><p>这个操作和同步仓库是一个操作，点击<strong>Publish/Sync</strong>上传或同步分支。</p>
<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>首先要把分支切换到你要删除的分支下，如我们要删除<strong>new master</strong>，将分支切换到<strong>new master</strong>点击右上角齿轮就会出现<strong>Delete new master</strong></p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png" alt=""></p>
<p>点击<strong>Delete new master</strong>就会弹出一个对话框，询问删除的内容。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%A1%AE%E8%AE%A4%E5%88%A0%E9%99%A4.png" alt=""></p>
<p>第一个<strong>yes ，Delete both</strong>是将本地与网页全部删除；<br>第二个<strong>Delete local only</strong>仅仅是删除本地。<br>第三个是取消。</p>
<h2 id="合并两个分支"><a href="#合并两个分支" class="headerlink" title="合并两个分支"></a>合并两个分支</h2><p>将一个分支与<strong>master</strong>分支进行合并。<br>我们首先把分支切换到<strong>master</strong>下，点击<strong>Update from new-branch</strong>进行分支的合并。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.png" alt=""></p>
<p>此时我们查看<strong>history</strong>目录下就会</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png" alt=""></p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub for Windows使用教程（一）]]></title>
      <url>http://yoursite.com/2016/05/03/GitHub-for-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鉴于网上目前的教材都太落后，github for windows已经更新了多个版本，好多界面都发生了变化，所以来写这个教程。目的是为了帮助和我一样初学github，但是苦于找不到教程的同学，为了写最详细的教程。配备了大量的图文介绍。该教程是基于<strong>GitHub for windows (3.0.17.0)</strong></p>
<h1 id="什么是Github"><a href="#什么是Github" class="headerlink" title="什么是Github"></a>什么是Github</h1><p>说到什么事github，我们先看wikipedia的描述“<a href="https://zh.wikipedia.org/wiki/GitHub" target="_blank" rel="external">GitHub是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。</a>”</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li><p>下载<a href="https://desktop.github.com/" target="_blank" rel="external">github for windows</a>，安装这里不赘述。</p>
</li>
<li><p><a href="https://github.com/" target="_blank" rel="external">注册github账号</a></p>
</li>
</ol>
<p><img src="http://i3.piimg.com/2513fb0c843f35c9.png" alt=""></p>
<ol>
<li>登陆到github for windows。</li>
</ol>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%99%BB%E9%99%86.png" alt=""></p>
<hr>
<p>准备工作都完了，我们开始正式学习。^_^</p>
<h1 id="创建第一个代码库"><a href="#创建第一个代码库" class="headerlink" title="创建第一个代码库"></a>创建第一个代码库</h1><h2 id="认识界面"><a href="#认识界面" class="headerlink" title="认识界面"></a>认识界面</h2><p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E4%BB%93%E5%BA%93%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>github for windows的界面非常清爽，的确符合geek的性质，个人表示非常喜欢。<br>我们来建立第一个仓库，点击左上角的<strong>+号</strong>，初次建立他会有一圈圈的涟漪，非常漂亮哦。<br>打开之后有三个选项，Add，Create，Clone。<br><img src="http://i3.piimg.com/cf0b5eb355dfb4cf.png" alt=""><br>我们分别来介绍一下这三个功能。</p>
<h3 id="Add功能"><a href="#Add功能" class="headerlink" title="Add功能"></a>Add功能</h3><p>如果本地有工程，就可以使用Add添加</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/Add%E5%8A%9F%E8%83%BD.png" alt=""></p>
<h3 id="Clone功能"><a href="#Clone功能" class="headerlink" title="Clone功能"></a>Clone功能</h3><p>这个功能其实最好理解了，克隆这名字通俗易懂好理解。<br>如何使用Clone功能呢？</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/clone%E5%8A%9F%E8%83%BD.png" alt=""></p>
<p>就是将在浏览器上已经创建好的项目导入到本地，换句话说就是下载到本地。</p>
<h3 id="Create功能"><a href="#Create功能" class="headerlink" title="Create功能"></a>Create功能</h3><p>创建一个代码库，<br>Name填写你的仓库名字。Local path写你将要保存在本地路径。我们主要从这个功能开始github之旅。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/create%E5%8A%9F%E8%83%BD.png" alt=""></p>
<p>我们在这里填写First，来创建第一个我们自己的repository。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%88%9B%E5%BB%BAfrist.png" alt=""></p>
<h1 id="开始使用第一个代码库"><a href="#开始使用第一个代码库" class="headerlink" title="开始使用第一个代码库"></a>开始使用第一个代码库</h1><h2 id="修改第一个代码库中内容"><a href="#修改第一个代码库中内容" class="headerlink" title="修改第一个代码库中内容"></a>修改第一个代码库中内容</h2><p>我们来找到刚刚创建的代码库在本地的位置。就是刚刚在local path的地址路径，当然如果你忘了，请右键点击First。<br><img src="http://i3.piimg.com/0e76cd4dde922713.png" alt=""><br>选择Open in Explorer。这样我们就可以转到刚刚的路径下。<br>我们新建一个文本文档。在里面编辑。<br>如下<br><img src="http://i3.piimg.com/ce9841870311a76d.png" alt=""><br>此时的github就会变成这个样子(Changs)：<br><img src="http://i3.piimg.com/2f8f72a1976e5986.png" alt=""><br>你会发现此时github会出现刚刚编辑的内容。</p>
<ol>
<li>这个是测试文本</li>
<li>你好<br>并且前面会有<strong>蓝色标识</strong>，那么这个<strong>蓝色标识</strong>是什么用呢？<br>其实这个蓝色标识是提示你会上改变的文本。比如我第一次只想改变<br><strong>这个是测试文本</strong>并不想把<strong>你好</strong>上传。<br>这时我们点击一下<strong>你好</strong>的前面的<strong>蓝色标识</strong>。</li>
</ol>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%B5%8B%E8%AF%95%E6%96%87%E6%9C%AC.png" alt=""></p>
<p>你会发现<strong>你好</strong>前面的蓝色标识没有了。<br>我们填写好<strong>Summer</strong>和<strong>Description</strong><br>Summer就是这次改动的总结，我们也可以理解为标题<em>（必填）</em>，而Description可以理解为详细概况<em>（选填）</em></p>
<hr>
<p>我们这里只选择第一个修改对象，也就是<strong>这个是测试文本</strong>就行修改。summer我们填写为<em>第一次修改</em>，Description我们填写为<em>增加了这个是测试文本</em>的内容，之后点击<strong>Commit to master</strong>。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E8%BF%99%E6%98%AF%E8%BF%99%E6%98%AF%E6%96%87%E6%9C%AC.png" alt=""></p>
<p>切换到<strong>History</strong>目录下</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/History%E7%9B%AE%E5%BD%95.png" alt=""></p>
<p>我们会发现他改变了。<br>这次我们把<strong>你好</strong>进行添加。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%AC%AC%E4%BA%8C%E6%AC%A1.png" alt=""></p>
<p>在<strong>History</strong>目录下发生了这样的改变。会在<strong>History</strong>目录下形成一天时间线，来指出每一次的修改标题和内容，同时会把修改的内容用<strong>绿色标识</strong>标出。<br>我们打开本地的文本，删除刚刚添加的第一行<strong>这个是测试文本</strong>。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E8%BF%99%E4%B8%AA%E6%98%AF%E6%B5%8B%E8%AF%95%E6%96%87%E6%9C%AC.png" alt=""></p>
<p>此时你就会发现github发生了变化。<br>很多人说这里会出现乱码,这个是编码问题,如果不修改编码,只是在客户端上显示乱码,但是上传后不会出现乱码,为了保险起见,建议大家还是把文本编码修改为 utf-8 .<br><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E5%88%A0%E9%99%A4%E7%BA%A2%E8%89%B2%E6%A0%87%E8%AF%86.png" alt=""></p>
<p>此时的<strong>红色标识</strong>标识删除。我们写好Summer和Description并点击Commit to master。<br>这样我们就删除了第一行。同时在<strong>History</strong>目录下又多了一条时间轴。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%BA%A2%E8%89%B2%E6%A0%87%E8%AF%86.png" alt=""></p>
<p>这样我们就完成了删除。</p>
<h2 id="上传与同步"><a href="#上传与同步" class="headerlink" title="上传与同步"></a>上传与同步</h2><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>此时，当我们打开github网页，就会发现此时你的修改的内容并没有出现在这里。这是因为你没有进行同步，仅仅是在本地就行了修改。此时我们仅仅需要点击右上角的<strong>publish</strong></p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E4%B8%8A%E4%BC%A0.png" alt=""></p>
<p>此时你就会本地内容已经上传到网页上。</p>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E7%BD%91%E9%A1%B5.png" alt=""></p>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>当你的代码库上传后就会发现，原来的<strong>publish</strong>以及变为了<strong>Sync</strong>。</p>
<p><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-5-3/66610926.jpg" alt=""></p>
<p>点击<strong>Sync</strong>同步代码库！</p>
<h1 id="打赏支持"><a href="#打赏支持" class="headerlink" title="打赏支持"></a>打赏支持</h1><hr>
<p><img src="http://7xt81u.com1.z0.glb.clouddn.com/%E6%89%93%E8%B5%8F%E6%94%AF%E6%8C%81.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大学？大学？大学？]]></title>
      <url>http://yoursite.com/2016/04/27/%E5%A4%A7%E5%AD%A6%EF%BC%9F%E5%A4%A7%E5%AD%A6%EF%BC%9F%E5%A4%A7%E5%AD%A6%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h1 id="大学？大学？-大学？"><a href="#大学？大学？-大学？" class="headerlink" title="大学？大学？ 大学？"></a>大学？大学？ 大学？</h1><p><strong>仅仅写给自己</strong></p>
<hr>
<h2 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h2><p>生活在这个大学里那种迷茫有时候只有自己知道，有时候的动力其实是为0的，只能按照自己的想法去走，可是一个人搞了两个晚上的东西，还是没有成功，有些事情只能自己去做，没人会对自己的事情感兴趣，更不会去帮你。当一个问题查阅了百度，google后仍旧没有解决，那种失落或许没人能懂！<br>连续两个晚上都在弄，看来百度，查了google，连youtube上的视频看了，然而问题依旧，只能靠自己慢慢去搞。然而MinwgM，Cmake对于一个刚刚接触软件工程的人来说，没有任何人的帮助，自己慢慢的去看，略知皮毛，然而Clion的报错让我已经筋疲力尽。<br>昨晚开始配置Clion，从MinWG开始，然后是Cmake，都是一个个的新名词，一次又一次的失败W，刚刚开始连Cmake都无法使用，后来helloworld都无法运行。这次是MinGM的报错，百度了，google了，看了youtube，这个问题不是我一个人遇到，然而我却看不到解决的方法，满是英文的屏幕看的非常吃力，当没有答案时，只能自己去创造答案。自己一个人去看报错的文档，然而我又一次高估了自己的能力……晦涩难懂的英文和路径，一头雾水。<br>同时IDEA也让我感到了无力，深深的无力。为什么，他们家的IDE要让开发者把时间都放在大量的配置上去。最后还是投靠了eclipse。但让clion我会继续研究下去的。</p>
<hr>
<p>或许有时候是太高估自己了，要走和别人不一样的道路，就用个编译器都要标新立异。从github+hexo的博客搭建到今天的Clion和Idea，真的很浪费时间，收获感觉微乎其微，达不到什么实质性的东西，包括现在学习github，好像是一个错误的想法，而且重要的是把别人往沟里带，让别人按自己的想法走，多可笑啊。是该好好整理一下自己的想法了，有时候该问问那些过来的人，多听听他们的建议，不要给自己多走弯路。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LinkList特有的方法]]></title>
      <url>http://yoursite.com/2016/04/23/LinkList%E7%89%B9%E6%9C%89%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="LinkList特有的方法"><a href="#LinkList特有的方法" class="headerlink" title="LinkList特有的方法"></a>LinkList特有的方法</h1><blockquote>
<p>addFirst();<br>addLast();</p>
</blockquote>
<p>添加元素，第一个或最后一个。</p>
<hr>
<blockquote>
<p>getList();<br>getFirst();</p>
</blockquote>
<p>获取元素，但是不会删除。如果集合中没有元素，会抛出<strong>NoSuchElementException</strong>。</p>
<hr>
<blockquote>
<p>removeFirst();<br>removeLast();</p>
</blockquote>
<p>获取元素，但是元素被删除。如果集合中没有元素，就会出现<strong>NoSuchElementException</strong>。</p>
<hr>
<p>在jdk1.6中出现了替代的方法：</p>
<blockquote>
<p>offerFirst();<br> offerLast();</p>
</blockquote>
<p>添加元素。</p>
<hr>
<blockquote>
<p>peekFirst();<br>peekLast();</p>
</blockquote>
<p>获取元素，但是元素不被删除。如果集合中没有元素，会返回<strong>null</strong>。</p>
<hr>
<blockquote>
<p>pollFirst();<br>pollLast();</p>
</blockquote>
<p>获取元素，但是元素被删除。如果集合中没有元素，会返回<strong>null</strong>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[清除右键无效项]]></title>
      <url>http://yoursite.com/2016/04/21/%E6%B8%85%E9%99%A4%E5%8F%B3%E9%94%AE%E6%97%A0%E6%95%88%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p> 清除右键无效项</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有时在安装一些程序时，当程序卸载后会留下一些右键无效项，对于强迫症处女座来说，这是一件万万不能的。</p>
<hr>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul>
<li><p>新建一个文本文档，复制下面的代码到文本里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@ ECHO OFF</span><br><span class="line">@ ECHO.</span><br><span class="line">@ ECHO.</span><br><span class="line">@ ECHO. 说 明</span><br><span class="line">@ ECHO -----------------------------------------------------------------------</span><br><span class="line">@ ECHO </span><br><span class="line">@ ECHO 可能杀毒软件会提示威胁项，允许运行就好！</span><br><span class="line">@ ECHO </span><br><span class="line">@ ECHO -----------------------------------------------------------------------</span><br><span class="line">@ Echo.</span><br><span class="line">PAUSE</span><br><span class="line">regsvr32 /u /s igfxpph.dll</span><br><span class="line">reg delete HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers /f</span><br><span class="line">reg add HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\new /ve /d &#123;D969A300-E7FF-11d0-A93B-00A0C90F2719&#125;</span><br><span class="line">reg delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v HotKeysCmds /f</span><br><span class="line">reg delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v IgfxTray /f</span><br></pre></td></tr></table></figure>
</li>
<li><p>将文本的后缀改为<strong><em>.cmd</em></strong>。</p>
</li>
<li>双击运行这个脚本。<br>此时，你就会发现那些没用的右键选项都没有了 ^ ^</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一次参加蓝桥杯感受]]></title>
      <url>http://yoursite.com/2016/04/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%84%9F%E5%8F%97/</url>
      <content type="html"><![CDATA[<p>  作为一名大一新生，这是我第一次参加这样的比赛，比赛前也没要指望要得什么奖项，抱着锻炼的态度，还好有所收获<br>  下面会列出我做的题和做题时的感受</p>
<hr>
<blockquote>
<h2 id="1-煤球数目"><a href="#1-煤球数目" class="headerlink" title="1.煤球数目"></a>1.煤球数目</h2><p>有一堆煤球，堆成三角棱锥形。具体：<br> 第一层放1个，<br>第二层3个（排列成三角形），<br>第三层6个（排列成三角形），<br>第四层10个（排列成三角形），<br>….<br>如果一共有100层，共有多少个煤球？<br>请填表示煤球总数目的数字。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>这个题的第一反应我是用excel做，用excel生成有序的数列，结果建立了excel后出现的是小树，瞬间懵逼…………只好一步一步的写代码，按理说这应该是一个简单的代码，可是我还是写错了，在我记忆里好像写的是5050……额，好心痛……</p>
<hr>
<blockquote>
<h2 id="2-生日蜡烛"><a href="#2-生日蜡烛" class="headerlink" title="2.生日蜡烛"></a>2.生日蜡烛</h2><p>某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。<br>现在算起来，他一共吹熄了236根蜡烛。<br>请问，他从多少岁开始过生日party的？<br>请填写他开始过生日party的年龄数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>这个题的第一反应还是excel表，最后我的确是用excel做出来了，也是这次比赛中唯一做对的题目。虽然用excel比较麻烦，但是对于我这种第一时间没有一个很好的明确思路的我来说，这样很快。</p>
<hr>
<blockquote>
<h2 id="3-凑算式"><a href="#3-凑算式" class="headerlink" title="3.凑算式"></a>3.凑算式</h2><p><img src="http://img.blog.csdn.net/20160320152805039" alt="图1.1"><br>这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。<br>比如：<br>6+8/3+952/714 就是一种解法，<br>5+3/1+972/486 是另一种解法。<br>这个算式一共有多少种解法？<br>注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>很简单的暴力求解，为什么我没有做对呢…………开始的时候题的要求是0~9，后来改为1~9，可惜，我们考场没有收到任何通知…………我按0~9算的……悲哀的人生</p>
<hr>
<p>做到这里的时候好像时间就过去了一个半小时了，实在是太慢了，也侧面说面对算法不熟练……</p>
<hr>
<blockquote>
<h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h2><p>排序在各种场合经常被用到。<br>快速排序是十分常用的高效率的算法。<br>其思想是：先选一个“标尺”，<br>用它把整个队列过一遍筛子，<br>以保证：其左边的元素都不大于它，其右边的元素都不小于它。<br>这样，排序问题就被分割为两个子区间。<br>再分别对子区间排序就可以了。<br>下面的代码是一种实现，请分析并填写划线部分缺少的代码。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = p;</span><br><span class="line">    <span class="keyword">int</span> j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = a[p];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);</span><br><span class="line">        <span class="keyword">while</span>(a[--j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</span><br><span class="line">        swap(a,i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    ______________________;</span><br><span class="line">    return j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> q = partition(a,p,r);</span><br><span class="line">        quicksort(a,p,q<span class="number">-1</span>);</span><br><span class="line">        quicksort(a,q+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">19</span>,<span class="number">27</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    quicksort(a, <span class="number">0</span>, N<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实第一眼看到快速排序就有点后悔，因为之前看过，但是没有记住，当时并没有重视。so，这个题自然是做错了。</p>
<hr>
<blockquote>
<p>##5.抽签<br>X星球要派出一个5人组成的观察团前往W星。<br>其中：<br>A国最多可以派出4人。<br>B国最多可以派出2人。<br>C国最多可以派出2人。<br>….<br>那么最终派往W星的观察团会有多少种国别的不同组合呢？<br>下面的程序解决了这个问题。<br>数组a[] 中既是每个国家可以派出的最多的名额。<br>程序执行结果为：<br>DEFFF<br>CEFFF<br>CDFFF<br>CDEFF<br>CCFFF<br>CCEFF<br>CCDFF<br>CCDEF<br>BEFFF<br>BDFFF<br>BDEFF<br>BCFFF<br>BCEFF<br>BCDFF<br>BCDEF<br>….<br>(以下省略，总共101行)</p>
</blockquote>
<p>没做出来</p>
<hr>
<blockquote>
<h2 id="6-方格填数"><a href="#6-方格填数" class="headerlink" title="6.方格填数"></a>6.方格填数</h2><p><img src="http://img.blog.csdn.net/20160320154048055" alt="1.2"><br>填入0~9的数字。要求：连续的两个数字不能相邻。<br>（左右、上下、对角都算相邻）<br>一共有多少种可能的填数方案？<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>这个题我是把每个格子标了序号，用暴力求解满足条件，好像我算的是400。额，有错了，好吧，我仅仅是做到这里。</p>
<hr>
<p>虽然我没有做完吧，甚至只做对了一道题，但是我想说，大一才刚刚开始，权当锻炼，而且还有很大的收获，以后要努力喽。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我一直都在]]></title>
      <url>http://yoursite.com/2016/04/20/%E6%88%91%E4%B8%80%E7%9B%B4%E9%83%BD%E5%9C%A8/</url>
      <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=35403523&auto=1&height=66"></iframe></p>
<blockquote>
<p>我没有最烈的酒，<br>我没有阳光和宇宙。<br>讲真儿，我从来没走，<br>所以也不需要留。<br>我在你身后。<br>不要愁，不要愁，<br>风雨与你共舟</p>
</blockquote>
<p>谢谢你！<br>加油，共勉！</p>
]]></content>
    </entry>
    
  
  
</search>
